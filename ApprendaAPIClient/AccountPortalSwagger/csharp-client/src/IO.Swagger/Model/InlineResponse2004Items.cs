/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2004Items
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004Items :  IEquatable<InlineResponse2004Items>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Items" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineResponse2004Items() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Items" /> class.
        /// </summary>
        /// <param name="Id">Id (required).</param>
        /// <param name="AppVersion">AppVersion.</param>
        /// <param name="Group">Group.</param>
        /// <param name="AssignedTo">AssignedTo.</param>
        /// <param name="AutoRenew">AutoRenew (required) (default to false).</param>
        /// <param name="CreatedDate">CreatedDate (required).</param>
        /// <param name="Description">Description.</param>
        /// <param name="LastRenewalDate">LastRenewalDate.</param>
        /// <param name="Locator">Locator.</param>
        /// <param name="Label">Label.</param>
        /// <param name="NextRenewalDate">NextRenewalDate.</param>
        /// <param name="ProviderId">ProviderId.</param>
        /// <param name="EditionName">EditionName.</param>
        /// <param name="Plan">Plan.</param>
        /// <param name="Status">Status.</param>
        /// <param name="TerminationDate">TerminationDate.</param>
        /// <param name="Href">Href.</param>
        public InlineResponse2004Items(string Id = default(string), InlineResponse200Plans AppVersion = default(InlineResponse200Plans), string Group = default(string), InlineResponse2004AssignedTo AssignedTo = default(InlineResponse2004AssignedTo), bool? AutoRenew = false, DateTime? CreatedDate = default(DateTime?), string Description = default(string), DateTime? LastRenewalDate = default(DateTime?), string Locator = default(string), string Label = default(string), DateTime? NextRenewalDate = default(DateTime?), string ProviderId = default(string), string EditionName = default(string), InlineResponse200Plans Plan = default(InlineResponse200Plans), string Status = default(string), DateTime? TerminationDate = default(DateTime?), string Href = default(string))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for InlineResponse2004Items and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "AutoRenew" is required (not null)
            if (AutoRenew == null)
            {
                throw new InvalidDataException("AutoRenew is a required property for InlineResponse2004Items and cannot be null");
            }
            else
            {
                this.AutoRenew = AutoRenew;
            }
            // to ensure "CreatedDate" is required (not null)
            if (CreatedDate == null)
            {
                throw new InvalidDataException("CreatedDate is a required property for InlineResponse2004Items and cannot be null");
            }
            else
            {
                this.CreatedDate = CreatedDate;
            }
            this.AppVersion = AppVersion;
            this.Group = Group;
            this.AssignedTo = AssignedTo;
            this.Description = Description;
            this.LastRenewalDate = LastRenewalDate;
            this.Locator = Locator;
            this.Label = Label;
            this.NextRenewalDate = NextRenewalDate;
            this.ProviderId = ProviderId;
            this.EditionName = EditionName;
            this.Plan = Plan;
            this.Status = Status;
            this.TerminationDate = TerminationDate;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public InlineResponse200Plans AppVersion { get; set; }
        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }
        /// <summary>
        /// Gets or Sets AssignedTo
        /// </summary>
        [DataMember(Name="assignedTo", EmitDefaultValue=false)]
        public InlineResponse2004AssignedTo AssignedTo { get; set; }
        /// <summary>
        /// Gets or Sets AutoRenew
        /// </summary>
        [DataMember(Name="autoRenew", EmitDefaultValue=false)]
        public bool? AutoRenew { get; set; }
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets LastRenewalDate
        /// </summary>
        [DataMember(Name="lastRenewalDate", EmitDefaultValue=false)]
        public DateTime? LastRenewalDate { get; set; }
        /// <summary>
        /// Gets or Sets Locator
        /// </summary>
        [DataMember(Name="locator", EmitDefaultValue=false)]
        public string Locator { get; set; }
        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }
        /// <summary>
        /// Gets or Sets NextRenewalDate
        /// </summary>
        [DataMember(Name="nextRenewalDate", EmitDefaultValue=false)]
        public DateTime? NextRenewalDate { get; set; }
        /// <summary>
        /// Gets or Sets ProviderId
        /// </summary>
        [DataMember(Name="providerId", EmitDefaultValue=false)]
        public string ProviderId { get; set; }
        /// <summary>
        /// Gets or Sets EditionName
        /// </summary>
        [DataMember(Name="editionName", EmitDefaultValue=false)]
        public string EditionName { get; set; }
        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public InlineResponse200Plans Plan { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Gets or Sets TerminationDate
        /// </summary>
        [DataMember(Name="terminationDate", EmitDefaultValue=false)]
        public DateTime? TerminationDate { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004Items {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  AssignedTo: ").Append(AssignedTo).Append("\n");
            sb.Append("  AutoRenew: ").Append(AutoRenew).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LastRenewalDate: ").Append(LastRenewalDate).Append("\n");
            sb.Append("  Locator: ").Append(Locator).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  NextRenewalDate: ").Append(NextRenewalDate).Append("\n");
            sb.Append("  ProviderId: ").Append(ProviderId).Append("\n");
            sb.Append("  EditionName: ").Append(EditionName).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InlineResponse2004Items);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Items instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2004Items to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Items other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AppVersion == other.AppVersion ||
                    this.AppVersion != null &&
                    this.AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    this.Group == other.Group ||
                    this.Group != null &&
                    this.Group.Equals(other.Group)
                ) && 
                (
                    this.AssignedTo == other.AssignedTo ||
                    this.AssignedTo != null &&
                    this.AssignedTo.Equals(other.AssignedTo)
                ) && 
                (
                    this.AutoRenew == other.AutoRenew ||
                    this.AutoRenew != null &&
                    this.AutoRenew.Equals(other.AutoRenew)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.LastRenewalDate == other.LastRenewalDate ||
                    this.LastRenewalDate != null &&
                    this.LastRenewalDate.Equals(other.LastRenewalDate)
                ) && 
                (
                    this.Locator == other.Locator ||
                    this.Locator != null &&
                    this.Locator.Equals(other.Locator)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.NextRenewalDate == other.NextRenewalDate ||
                    this.NextRenewalDate != null &&
                    this.NextRenewalDate.Equals(other.NextRenewalDate)
                ) && 
                (
                    this.ProviderId == other.ProviderId ||
                    this.ProviderId != null &&
                    this.ProviderId.Equals(other.ProviderId)
                ) && 
                (
                    this.EditionName == other.EditionName ||
                    this.EditionName != null &&
                    this.EditionName.Equals(other.EditionName)
                ) && 
                (
                    this.Plan == other.Plan ||
                    this.Plan != null &&
                    this.Plan.Equals(other.Plan)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.TerminationDate == other.TerminationDate ||
                    this.TerminationDate != null &&
                    this.TerminationDate.Equals(other.TerminationDate)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AppVersion != null)
                    hash = hash * 59 + this.AppVersion.GetHashCode();
                if (this.Group != null)
                    hash = hash * 59 + this.Group.GetHashCode();
                if (this.AssignedTo != null)
                    hash = hash * 59 + this.AssignedTo.GetHashCode();
                if (this.AutoRenew != null)
                    hash = hash * 59 + this.AutoRenew.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.LastRenewalDate != null)
                    hash = hash * 59 + this.LastRenewalDate.GetHashCode();
                if (this.Locator != null)
                    hash = hash * 59 + this.Locator.GetHashCode();
                if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                if (this.NextRenewalDate != null)
                    hash = hash * 59 + this.NextRenewalDate.GetHashCode();
                if (this.ProviderId != null)
                    hash = hash * 59 + this.ProviderId.GetHashCode();
                if (this.EditionName != null)
                    hash = hash * 59 + this.EditionName.GetHashCode();
                if (this.Plan != null)
                    hash = hash * 59 + this.Plan.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.TerminationDate != null)
                    hash = hash * 59 + this.TerminationDate.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
