/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Returns all roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiV1RolesGet ();

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Returns all roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiV1RolesGetWithHttpInfo ();
        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// Create new roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>InlineResponse2003Items</returns>
        InlineResponse2003Items ApiV1RolesPost (Body1 body = null);

        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// Create new roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        ApiResponse<InlineResponse2003Items> ApiV1RolesPostWithHttpInfo (Body1 body = null);
        /// <summary>
        /// Remove role
        /// </summary>
        /// <remarks>
        /// Remove a role from the Tenant Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdDelete (string roleId);

        /// <summary>
        /// Remove role
        /// </summary>
        /// <remarks>
        /// Remove a role from the Tenant Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdDeleteWithHttpInfo (string roleId);
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Returns imformation for a role for the given id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2003Items</returns>
        InlineResponse2003Items ApiV1RolesRoleIdGet (string roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Returns imformation for a role for the given id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        ApiResponse<InlineResponse2003Items> ApiV1RolesRoleIdGetWithHttpInfo (string roleId);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>InlineResponse2003Items</returns>
        InlineResponse2003Items ApiV1RolesRoleIdPut (string roleId, Body2 body = null);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        ApiResponse<InlineResponse2003Items> ApiV1RolesRoleIdPutWithHttpInfo (string roleId, Body2 body = null);
        /// <summary>
        /// Remove a sub-role from a role
        /// </summary>
        /// <remarks>
        /// Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdRolesDelete (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a sub-role from a role
        /// </summary>
        /// <remarks>
        /// Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdRolesDeleteWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get all sub-roles assigned to a role
        /// </summary>
        /// <remarks>
        /// Returns all roles assigned to a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiV1RolesRoleIdRolesGet (string roleId);

        /// <summary>
        /// Get all sub-roles assigned to a role
        /// </summary>
        /// <remarks>
        /// Returns all roles assigned to a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiV1RolesRoleIdRolesGetWithHttpInfo (string roleId);
        /// <summary>
        /// Make role a sub-role of another role
        /// </summary>
        /// <remarks>
        /// Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdRolesPost (string roleId, List<string> roleIds = null);

        /// <summary>
        /// Make role a sub-role of another role
        /// </summary>
        /// <remarks>
        /// Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdRolesPostWithHttpInfo (string roleId, List<string> roleIds = null);
        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 ApiV1RolesRoleIdSecurablesGet (string roleId);

        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> ApiV1RolesRoleIdSecurablesGetWithHttpInfo (string roleId);
        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdUsersDelete (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdUsersDeleteWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ApiV1RolesRoleIdUsersGet (string roleId);

        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ApiV1RolesRoleIdUsersGetWithHttpInfo (string roleId);
        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdUsersPost (string roleId, List<string> body = null);

        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdUsersPostWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns></returns>
        void ApiV1UserRolesDelete (string userId, List<string> body = null);

        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1UserRolesDeleteWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiV1UserRolesGet (string userId);

        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiV1UserRolesGetWithHttpInfo (string userId);
        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns></returns>
        void ApiV1UserRolesPost (string userId, List<string> body = null);

        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1UserRolesPostWithHttpInfo (string userId, List<string> body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsync (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsync (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsync (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Returns all roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiV1RolesGetAsync ();

        /// <summary>
        /// Get all roles
        /// </summary>
        /// <remarks>
        /// Returns all roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1RolesGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// Create new roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesPostAsync (Body1 body = null);

        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// Create new roles for your Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesPostAsyncWithHttpInfo (Body1 body = null);
        /// <summary>
        /// Remove role
        /// </summary>
        /// <remarks>
        /// Remove a role from the Tenant Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdDeleteAsync (string roleId);

        /// <summary>
        /// Remove role
        /// </summary>
        /// <remarks>
        /// Remove a role from the Tenant Account.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdDeleteAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Returns imformation for a role for the given id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesRoleIdGetAsync (string roleId);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// Returns imformation for a role for the given id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesRoleIdGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesRoleIdPutAsync (string roleId, Body2 body = null);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesRoleIdPutAsyncWithHttpInfo (string roleId, Body2 body = null);
        /// <summary>
        /// Remove a sub-role from a role
        /// </summary>
        /// <remarks>
        /// Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdRolesDeleteAsync (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a sub-role from a role
        /// </summary>
        /// <remarks>
        /// Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdRolesDeleteAsyncWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get all sub-roles assigned to a role
        /// </summary>
        /// <remarks>
        /// Returns all roles assigned to a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiV1RolesRoleIdRolesGetAsync (string roleId);

        /// <summary>
        /// Get all sub-roles assigned to a role
        /// </summary>
        /// <remarks>
        /// Returns all roles assigned to a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1RolesRoleIdRolesGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Make role a sub-role of another role
        /// </summary>
        /// <remarks>
        /// Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdRolesPostAsync (string roleId, List<string> roleIds = null);

        /// <summary>
        /// Make role a sub-role of another role
        /// </summary>
        /// <remarks>
        /// Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdRolesPostAsyncWithHttpInfo (string roleId, List<string> roleIds = null);
        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> ApiV1RolesRoleIdSecurablesGetAsync (string roleId);

        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdUsersDeleteAsync (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ApiV1RolesRoleIdUsersGetAsync (string roleId);

        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdUsersPostAsync (string roleId, List<string> body = null);

        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1UserRolesDeleteAsync (string userId, List<string> body = null);

        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesDeleteAsyncWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiV1UserRolesGetAsync (string userId);

        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1UserRolesGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1UserRolesPostAsync (string userId, List<string> body = null);

        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesPostAsyncWithHttpInfo (string userId, List<string> body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete (string applicationVersionKey, string securableId, List<string> body = null)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo(applicationVersionKey, securableId, body);
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsync (string applicationVersionKey, string securableId, List<string> body = null)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo(applicationVersionKey, securableId, body);

        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet (string applicationVersionKey, string securableId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsync (string applicationVersionKey, string securableId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost (string applicationVersionKey, string securableId, List<string> body = null)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo(applicationVersionKey, securableId, body);
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsync (string applicationVersionKey, string securableId, List<string> body = null)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo(applicationVersionKey, securableId, body);

        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling RolesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all roles Returns all roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiV1RolesGet ()
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiV1RolesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles Returns all roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiV1RolesGetWithHttpInfo ()
        {

            var localVarPath = "/api/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get all roles Returns all roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiV1RolesGetAsync ()
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiV1RolesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all roles Returns all roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1RolesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Create role Create new roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>InlineResponse2003Items</returns>
        public InlineResponse2003Items ApiV1RolesPost (Body1 body = null)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = ApiV1RolesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create role Create new roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        public ApiResponse< InlineResponse2003Items > ApiV1RolesPostWithHttpInfo (Body1 body = null)
        {

            var localVarPath = "/api/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Create role Create new roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesPostAsync (Body1 body = null)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = await ApiV1RolesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create role Create new roles for your Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Array of role definitions to add (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesPostAsyncWithHttpInfo (Body1 body = null)
        {

            var localVarPath = "/api/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Remove role Remove a role from the Tenant Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdDelete (string roleId)
        {
             ApiV1RolesRoleIdDeleteWithHttpInfo(roleId);
        }

        /// <summary>
        /// Remove role Remove a role from the Tenant Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdDeleteWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdDelete");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove role Remove a role from the Tenant Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdDeleteAsync (string roleId)
        {
             await ApiV1RolesRoleIdDeleteAsyncWithHttpInfo(roleId);

        }

        /// <summary>
        /// Remove role Remove a role from the Tenant Account.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdDeleteAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdDelete");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get role Returns imformation for a role for the given id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2003Items</returns>
        public InlineResponse2003Items ApiV1RolesRoleIdGet (string roleId)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = ApiV1RolesRoleIdGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role Returns imformation for a role for the given id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        public ApiResponse< InlineResponse2003Items > ApiV1RolesRoleIdGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdGet");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Get role Returns imformation for a role for the given id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesRoleIdGetAsync (string roleId)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = await ApiV1RolesRoleIdGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role Returns imformation for a role for the given id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesRoleIdGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdGet");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Update role Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>InlineResponse2003Items</returns>
        public InlineResponse2003Items ApiV1RolesRoleIdPut (string roleId, Body2 body = null)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = ApiV1RolesRoleIdPutWithHttpInfo(roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update role Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003Items</returns>
        public ApiResponse< InlineResponse2003Items > ApiV1RolesRoleIdPutWithHttpInfo (string roleId, Body2 body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdPut");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Update role Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>Task of InlineResponse2003Items</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003Items> ApiV1RolesRoleIdPutAsync (string roleId, Body2 body = null)
        {
             ApiResponse<InlineResponse2003Items> localVarResponse = await ApiV1RolesRoleIdPutAsyncWithHttpInfo(roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update role Make updates to a role with the given role id. Making a request to this endpoint will update all fields for a role. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role definitions to update. All fields should be passed in every request. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003Items)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003Items>> ApiV1RolesRoleIdPutAsyncWithHttpInfo (string roleId, Body2 body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdPut");

            var localVarPath = "/api/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003Items)));
            
        }

        /// <summary>
        /// Remove a sub-role from a role Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdRolesDelete (string roleId, List<string> body = null)
        {
             ApiV1RolesRoleIdRolesDeleteWithHttpInfo(roleId, body);
        }

        /// <summary>
        /// Remove a sub-role from a role Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdRolesDeleteWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesDelete");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a sub-role from a role Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdRolesDeleteAsync (string roleId, List<string> body = null)
        {
             await ApiV1RolesRoleIdRolesDeleteAsyncWithHttpInfo(roleId, body);

        }

        /// <summary>
        /// Remove a sub-role from a role Remove a sub role from a role. Users assigned to the removed sub-role will no longer inherit securables from the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of role ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdRolesDeleteAsyncWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesDelete");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all sub-roles assigned to a role Returns all roles assigned to a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiV1RolesRoleIdRolesGet (string roleId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiV1RolesRoleIdRolesGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sub-roles assigned to a role Returns all roles assigned to a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiV1RolesRoleIdRolesGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesGet");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get all sub-roles assigned to a role Returns all roles assigned to a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiV1RolesRoleIdRolesGetAsync (string roleId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiV1RolesRoleIdRolesGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sub-roles assigned to a role Returns all roles assigned to a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1RolesRoleIdRolesGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesGet");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Make role a sub-role of another role Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdRolesPost (string roleId, List<string> roleIds = null)
        {
             ApiV1RolesRoleIdRolesPostWithHttpInfo(roleId, roleIds);
        }

        /// <summary>
        /// Make role a sub-role of another role Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdRolesPostWithHttpInfo (string roleId, List<string> roleIds = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesPost");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (roleIds != null && roleIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Make role a sub-role of another role Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdRolesPostAsync (string roleId, List<string> roleIds = null)
        {
             await ApiV1RolesRoleIdRolesPostAsyncWithHttpInfo(roleId, roleIds);

        }

        /// <summary>
        /// Make role a sub-role of another role Add a role as a sub-role to another role. Users assigned to the sub-role will inherit securables assigned to the parent role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="roleIds">Array of role ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdRolesPostAsyncWithHttpInfo (string roleId, List<string> roleIds = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdRolesPost");

            var localVarPath = "/api/v1/roles/{roleId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (roleIds != null && roleIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 ApiV1RolesRoleIdSecurablesGet (string roleId)
        {
             ApiResponse<InlineResponse2002> localVarResponse = ApiV1RolesRoleIdSecurablesGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > ApiV1RolesRoleIdSecurablesGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdSecurablesGet");

            var localVarPath = "/api/v1/roles/{roleId}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdSecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> ApiV1RolesRoleIdSecurablesGetAsync (string roleId)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdSecurablesGet");

            var localVarPath = "/api/v1/roles/{roleId}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdSecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
            
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdUsersDelete (string roleId, List<string> body = null)
        {
             ApiV1RolesRoleIdUsersDeleteWithHttpInfo(roleId, body);
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdUsersDeleteWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersDelete");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdUsersDeleteAsync (string roleId, List<string> body = null)
        {
             await ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo(roleId, body);

        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersDelete");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ApiV1RolesRoleIdUsersGet (string roleId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ApiV1RolesRoleIdUsersGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ApiV1RolesRoleIdUsersGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersGet");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
            
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ApiV1RolesRoleIdUsersGetAsync (string roleId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersGet");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
            
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdUsersPost (string roleId, List<string> body = null)
        {
             ApiV1RolesRoleIdUsersPostWithHttpInfo(roleId, body);
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdUsersPostWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersPost");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdUsersPostAsync (string roleId, List<string> body = null)
        {
             await ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo(roleId, body);

        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->ApiV1RolesRoleIdUsersPost");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns></returns>
        public void ApiV1UserRolesDelete (string userId, List<string> body = null)
        {
             ApiV1UserRolesDeleteWithHttpInfo(userId, body);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1UserRolesDeleteWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesDelete");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1UserRolesDeleteAsync (string userId, List<string> body = null)
        {
             await ApiV1UserRolesDeleteAsyncWithHttpInfo(userId, body);

        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesDeleteAsyncWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesDelete");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiV1UserRolesGet (string userId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiV1UserRolesGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiV1UserRolesGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesGet");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiV1UserRolesGetAsync (string userId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiV1UserRolesGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1UserRolesGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesGet");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns></returns>
        public void ApiV1UserRolesPost (string userId, List<string> body = null)
        {
             ApiV1UserRolesPostWithHttpInfo(userId, body);
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1UserRolesPostWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesPost");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1UserRolesPostAsync (string userId, List<string> body = null)
        {
             await ApiV1UserRolesPostAsyncWithHttpInfo(userId, body);

        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesPostAsyncWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RolesApi->ApiV1UserRolesPost");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
