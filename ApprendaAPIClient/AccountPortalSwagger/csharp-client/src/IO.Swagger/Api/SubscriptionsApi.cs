/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all subscriptions of an application version
        /// </summary>
        /// <remarks>
        /// Return all subscriptions associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet (string applicationVersionKey);

        /// <summary>
        /// Get all subscriptions of an application version
        /// </summary>
        /// <remarks>
        /// Return all subscriptions associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Cancel a subscription
        /// </summary>
        /// <remarks>
        /// Cancel a subscription by locator id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete (string applicationVersionKey, string locator);

        /// <summary>
        /// Cancel a subscription
        /// </summary>
        /// <remarks>
        /// Cancel a subscription by locator id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteWithHttpInfo (string applicationVersionKey, string locator);
        /// <summary>
        /// Get a subscription for an application version
        /// </summary>
        /// <remarks>
        /// Return a subscription for an application version by its locator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>InlineResponse2004Items</returns>
        InlineResponse2004Items ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet (string applicationVersionKey, string locator);

        /// <summary>
        /// Get a subscription for an application version
        /// </summary>
        /// <remarks>
        /// Return a subscription for an application version by its locator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>ApiResponse of InlineResponse2004Items</returns>
        ApiResponse<InlineResponse2004Items> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetWithHttpInfo (string applicationVersionKey, string locator);
        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// Create plan subscriptions for an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost (string applicationVersionKey, Body body = null);

        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// Create plan subscriptions for an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostWithHttpInfo (string applicationVersionKey, Body body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all subscriptions of an application version
        /// </summary>
        /// <remarks>
        /// Return all subscriptions associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetAsync (string applicationVersionKey);

        /// <summary>
        /// Get all subscriptions of an application version
        /// </summary>
        /// <remarks>
        /// Return all subscriptions associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetAsyncWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsync (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsync (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Cancel a subscription
        /// </summary>
        /// <remarks>
        /// Cancel a subscription by locator id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteAsync (string applicationVersionKey, string locator);

        /// <summary>
        /// Cancel a subscription
        /// </summary>
        /// <remarks>
        /// Cancel a subscription by locator id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator);
        /// <summary>
        /// Get a subscription for an application version
        /// </summary>
        /// <remarks>
        /// Return a subscription for an application version by its locator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of InlineResponse2004Items</returns>
        System.Threading.Tasks.Task<InlineResponse2004Items> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetAsync (string applicationVersionKey, string locator);

        /// <summary>
        /// Get a subscription for an application version
        /// </summary>
        /// <remarks>
        /// Return a subscription for an application version by its locator.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of ApiResponse (InlineResponse2004Items)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004Items>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetAsyncWithHttpInfo (string applicationVersionKey, string locator);
        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// Create plan subscriptions for an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostAsync (string applicationVersionKey, Body body = null);

        /// <summary>
        /// Create a new subscription
        /// </summary>
        /// <remarks>
        /// Create plan subscriptions for an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostAsyncWithHttpInfo (string applicationVersionKey, Body body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all subscriptions of an application version Return all subscriptions associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet (string applicationVersionKey)
        {
             ApiResponse<InlineResponse2004> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subscriptions of an application version Return all subscriptions associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

        /// <summary>
        /// Get all subscriptions of an application version Return all subscriptions associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetAsync (string applicationVersionKey)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetAsyncWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subscriptions of an application version Return all subscriptions associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGetAsyncWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete (string applicationVersionKey, string locator, string userId)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo(applicationVersionKey, locator, userId);
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsync (string applicationVersionKey, string locator, string userId)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo(applicationVersionKey, locator, userId);

        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost (string applicationVersionKey, string locator, string userId)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo(applicationVersionKey, locator, userId);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsync (string applicationVersionKey, string locator, string userId)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo(applicationVersionKey, locator, userId);

        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a subscription Cancel a subscription by locator id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete (string applicationVersionKey, string locator)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteWithHttpInfo(applicationVersionKey, locator);
        }

        /// <summary>
        /// Cancel a subscription Cancel a subscription by locator id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteWithHttpInfo (string applicationVersionKey, string locator)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a subscription Cancel a subscription by locator id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteAsync (string applicationVersionKey, string locator)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteAsyncWithHttpInfo(applicationVersionKey, locator);

        }

        /// <summary>
        /// Cancel a subscription Cancel a subscription by locator id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a subscription for an application version Return a subscription for an application version by its locator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>InlineResponse2004Items</returns>
        public InlineResponse2004Items ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet (string applicationVersionKey, string locator)
        {
             ApiResponse<InlineResponse2004Items> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetWithHttpInfo(applicationVersionKey, locator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a subscription for an application version Return a subscription for an application version by its locator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>ApiResponse of InlineResponse2004Items</returns>
        public ApiResponse< InlineResponse2004Items > ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetWithHttpInfo (string applicationVersionKey, string locator)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004Items)));
            
        }

        /// <summary>
        /// Get a subscription for an application version Return a subscription for an application version by its locator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of InlineResponse2004Items</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004Items> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetAsync (string applicationVersionKey, string locator)
        {
             ApiResponse<InlineResponse2004Items> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetAsyncWithHttpInfo(applicationVersionKey, locator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a subscription for an application version Return a subscription for an application version by its locator.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <returns>Task of ApiResponse (InlineResponse2004Items)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004Items>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGetAsyncWithHttpInfo (string applicationVersionKey, string locator)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004Items>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004Items) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004Items)));
            
        }

        /// <summary>
        /// Create a new subscription Create plan subscriptions for an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost (string applicationVersionKey, Body body = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostWithHttpInfo(applicationVersionKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new subscription Create plan subscriptions for an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostWithHttpInfo (string applicationVersionKey, Body body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

        /// <summary>
        /// Create a new subscription Create plan subscriptions for an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostAsync (string applicationVersionKey, Body body = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostAsyncWithHttpInfo(applicationVersionKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new subscription Create plan subscriptions for an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="body">Array of plans and the number of new subscriptions to create for each plan (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPostAsyncWithHttpInfo (string applicationVersionKey, Body body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SubscriptionsApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
            
        }

    }
}
