/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all securables for an application version
        /// </summary>
        /// <remarks>
        /// Returns a list of securables associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>UnpagedResourceBaseSecurable</returns>
        UnpagedResourceBaseSecurable ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet (string applicationVersionKey);

        /// <summary>
        /// Get all securables for an application version
        /// </summary>
        /// <remarks>
        /// Returns a list of securables associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of UnpagedResourceBaseSecurable</returns>
        ApiResponse<UnpagedResourceBaseSecurable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Get a securable for an application version
        /// </summary>
        /// <remarks>
        /// Returns a securable for the application version and securable id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Securable</returns>
        Securable ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get a securable for an application version
        /// </summary>
        /// <remarks>
        /// Returns a securable for the application version and securable id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of Securable</returns>
        ApiResponse<Securable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>UnpagedResourceBaseRole</returns>
        UnpagedResourceBaseRole ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of UnpagedResourceBaseRole</returns>
        ApiResponse<UnpagedResourceBaseRole> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>UnpagedResourceBaseSecurable</returns>
        UnpagedResourceBaseSecurable ApiV1RolesRoleIdSecurablesGet (string roleId);

        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of UnpagedResourceBaseSecurable</returns>
        ApiResponse<UnpagedResourceBaseSecurable> ApiV1RolesRoleIdSecurablesGetWithHttpInfo (string roleId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all securables for an application version
        /// </summary>
        /// <remarks>
        /// Returns a list of securables associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of UnpagedResourceBaseSecurable</returns>
        System.Threading.Tasks.Task<UnpagedResourceBaseSecurable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetAsync (string applicationVersionKey);

        /// <summary>
        /// Get all securables for an application version
        /// </summary>
        /// <remarks>
        /// Returns a list of securables associated with an application version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseSecurable)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseSecurable>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetAsyncWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Get a securable for an application version
        /// </summary>
        /// <remarks>
        /// Returns a securable for the application version and securable id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of Securable</returns>
        System.Threading.Tasks.Task<Securable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetAsync (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get a securable for an application version
        /// </summary>
        /// <remarks>
        /// Returns a securable for the application version and securable id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (Securable)</returns>
        System.Threading.Tasks.Task<ApiResponse<Securable>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetAsyncWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsync (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Remove role from a securable
        /// </summary>
        /// <remarks>
        /// Remove the specified role(s) from a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of UnpagedResourceBaseRole</returns>
        System.Threading.Tasks.Task<UnpagedResourceBaseRole> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsync (string applicationVersionKey, string securableId);

        /// <summary>
        /// Get all roles using a securable
        /// </summary>
        /// <remarks>
        /// Returns the roles associated with the securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseRole)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseRole>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo (string applicationVersionKey, string securableId);
        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsync (string applicationVersionKey, string securableId, List<string> body = null);

        /// <summary>
        /// Assign role(s) to a securable
        /// </summary>
        /// <remarks>
        /// Assign role(s) to a securable.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null);
        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of UnpagedResourceBaseSecurable</returns>
        System.Threading.Tasks.Task<UnpagedResourceBaseSecurable> ApiV1RolesRoleIdSecurablesGetAsync (string roleId);

        /// <summary>
        /// Get all securables for a role
        /// </summary>
        /// <remarks>
        /// Returns a list of all securables associated with a given role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseSecurable)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseSecurable>> ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo (string roleId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurablesApi : ISecurablesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurablesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurablesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all securables for an application version Returns a list of securables associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>UnpagedResourceBaseSecurable</returns>
        public UnpagedResourceBaseSecurable ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet (string applicationVersionKey)
        {
             ApiResponse<UnpagedResourceBaseSecurable> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all securables for an application version Returns a list of securables associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of UnpagedResourceBaseSecurable</returns>
        public ApiResponse< UnpagedResourceBaseSecurable > ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseSecurable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseSecurable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseSecurable)));
            
        }

        /// <summary>
        /// Get all securables for an application version Returns a list of securables associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of UnpagedResourceBaseSecurable</returns>
        public async System.Threading.Tasks.Task<UnpagedResourceBaseSecurable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetAsync (string applicationVersionKey)
        {
             ApiResponse<UnpagedResourceBaseSecurable> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetAsyncWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all securables for an application version Returns a list of securables associated with an application version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseSecurable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseSecurable>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesGetAsyncWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseSecurable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseSecurable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseSecurable)));
            
        }

        /// <summary>
        /// Get a securable for an application version Returns a securable for the application version and securable id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Securable</returns>
        public Securable ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet (string applicationVersionKey, string securableId)
        {
             ApiResponse<Securable> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a securable for an application version Returns a securable for the application version and securable id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of Securable</returns>
        public ApiResponse< Securable > ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Securable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Securable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Securable)));
            
        }

        /// <summary>
        /// Get a securable for an application version Returns a securable for the application version and securable id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of Securable</returns>
        public async System.Threading.Tasks.Task<Securable> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetAsync (string applicationVersionKey, string securableId)
        {
             ApiResponse<Securable> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetAsyncWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a securable for an application version Returns a securable for the application version and securable id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (Securable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Securable>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGetAsyncWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Securable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Securable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Securable)));
            
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete (string applicationVersionKey, string securableId, List<string> body = null)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo(applicationVersionKey, securableId, body);
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsync (string applicationVersionKey, string securableId, List<string> body = null)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo(applicationVersionKey, securableId, body);

        }

        /// <summary>
        /// Remove role from a securable Remove the specified role(s) from a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names to be removed from the securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDeleteAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>UnpagedResourceBaseRole</returns>
        public UnpagedResourceBaseRole ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet (string applicationVersionKey, string securableId)
        {
             ApiResponse<UnpagedResourceBaseRole> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>ApiResponse of UnpagedResourceBaseRole</returns>
        public ApiResponse< UnpagedResourceBaseRole > ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseRole)));
            
        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of UnpagedResourceBaseRole</returns>
        public async System.Threading.Tasks.Task<UnpagedResourceBaseRole> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsync (string applicationVersionKey, string securableId)
        {
             ApiResponse<UnpagedResourceBaseRole> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo(applicationVersionKey, securableId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all roles using a securable Returns the roles associated with the securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseRole)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseRole>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGetAsyncWithHttpInfo (string applicationVersionKey, string securableId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseRole>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseRole) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseRole)));
            
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost (string applicationVersionKey, string securableId, List<string> body = null)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo(applicationVersionKey, securableId, body);
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsync (string applicationVersionKey, string securableId, List<string> body = null)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo(applicationVersionKey, securableId, body);

        }

        /// <summary>
        /// Assign role(s) to a securable Assign role(s) to a securable.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="securableId">Required. Unique Platform assigned id of a securable</param>
        /// <param name="body">Array of role names that should be associated with this securable (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPostAsyncWithHttpInfo (string applicationVersionKey, string securableId, List<string> body = null)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");
            // verify the required parameter 'securableId' is set
            if (securableId == null)
                throw new ApiException(400, "Missing required parameter 'securableId' when calling SecurablesApi->ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/securables/{securableId}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (securableId != null) localVarPathParams.Add("securableId", Configuration.ApiClient.ParameterToString(securableId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySecurablesSecurableIdRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>UnpagedResourceBaseSecurable</returns>
        public UnpagedResourceBaseSecurable ApiV1RolesRoleIdSecurablesGet (string roleId)
        {
             ApiResponse<UnpagedResourceBaseSecurable> localVarResponse = ApiV1RolesRoleIdSecurablesGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of UnpagedResourceBaseSecurable</returns>
        public ApiResponse< UnpagedResourceBaseSecurable > ApiV1RolesRoleIdSecurablesGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling SecurablesApi->ApiV1RolesRoleIdSecurablesGet");

            var localVarPath = "/api/v1/roles/{roleId}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdSecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseSecurable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseSecurable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseSecurable)));
            
        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of UnpagedResourceBaseSecurable</returns>
        public async System.Threading.Tasks.Task<UnpagedResourceBaseSecurable> ApiV1RolesRoleIdSecurablesGetAsync (string roleId)
        {
             ApiResponse<UnpagedResourceBaseSecurable> localVarResponse = await ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all securables for a role Returns a list of all securables associated with a given role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (UnpagedResourceBaseSecurable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnpagedResourceBaseSecurable>> ApiV1RolesRoleIdSecurablesGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling SecurablesApi->ApiV1RolesRoleIdSecurablesGet");

            var localVarPath = "/api/v1/roles/{roleId}/securables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdSecurablesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnpagedResourceBaseSecurable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnpagedResourceBaseSecurable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnpagedResourceBaseSecurable)));
            
        }

    }
}
