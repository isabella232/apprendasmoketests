/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a version of an application
        /// </summary>
        /// <remarks>
        /// Returns a single application version for the given application and version alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApplicationVersion</returns>
        ApplicationVersion ApiV1ApplicationVersionsApplicationVersionKeyGet (string applicationVersionKey);

        /// <summary>
        /// Get a version of an application
        /// </summary>
        /// <remarks>
        /// Returns a single application version for the given application and version alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of ApplicationVersion</returns>
        ApiResponse<ApplicationVersion> ApiV1ApplicationVersionsApplicationVersionKeyGetWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Get all applications
        /// </summary>
        /// <remarks>
        /// Returns a list of all applications, including different versions, for the Tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>PagedResourceBaseApplicationVersion</returns>
        PagedResourceBaseApplicationVersion ApiV1ApplicationVersionsGet (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Get all applications
        /// </summary>
        /// <remarks>
        /// Returns a list of all applications, including different versions, for the Tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>ApiResponse of PagedResourceBaseApplicationVersion</returns>
        ApiResponse<PagedResourceBaseApplicationVersion> ApiV1ApplicationVersionsGetWithHttpInfo (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a version of an application
        /// </summary>
        /// <remarks>
        /// Returns a single application version for the given application and version alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApplicationVersion</returns>
        System.Threading.Tasks.Task<ApplicationVersion> ApiV1ApplicationVersionsApplicationVersionKeyGetAsync (string applicationVersionKey);

        /// <summary>
        /// Get a version of an application
        /// </summary>
        /// <remarks>
        /// Returns a single application version for the given application and version alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (ApplicationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationVersion>> ApiV1ApplicationVersionsApplicationVersionKeyGetAsyncWithHttpInfo (string applicationVersionKey);
        /// <summary>
        /// Get all applications
        /// </summary>
        /// <remarks>
        /// Returns a list of all applications, including different versions, for the Tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>Task of PagedResourceBaseApplicationVersion</returns>
        System.Threading.Tasks.Task<PagedResourceBaseApplicationVersion> ApiV1ApplicationVersionsGetAsync (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null);

        /// <summary>
        /// Get all applications
        /// </summary>
        /// <remarks>
        /// Returns a list of all applications, including different versions, for the Tenant.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceBaseApplicationVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResourceBaseApplicationVersion>> ApiV1ApplicationVersionsGetAsyncWithHttpInfo (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationVersionsApi : IApplicationVersionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationVersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationVersionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationVersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationVersionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a version of an application Returns a single application version for the given application and version alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApplicationVersion</returns>
        public ApplicationVersion ApiV1ApplicationVersionsApplicationVersionKeyGet (string applicationVersionKey)
        {
             ApiResponse<ApplicationVersion> localVarResponse = ApiV1ApplicationVersionsApplicationVersionKeyGetWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a version of an application Returns a single application version for the given application and version alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>ApiResponse of ApplicationVersion</returns>
        public ApiResponse< ApplicationVersion > ApiV1ApplicationVersionsApplicationVersionKeyGetWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling ApplicationVersionsApi->ApiV1ApplicationVersionsApplicationVersionKeyGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationVersion)));
            
        }

        /// <summary>
        /// Get a version of an application Returns a single application version for the given application and version alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApplicationVersion</returns>
        public async System.Threading.Tasks.Task<ApplicationVersion> ApiV1ApplicationVersionsApplicationVersionKeyGetAsync (string applicationVersionKey)
        {
             ApiResponse<ApplicationVersion> localVarResponse = await ApiV1ApplicationVersionsApplicationVersionKeyGetAsyncWithHttpInfo(applicationVersionKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a version of an application Returns a single application version for the given application and version alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <returns>Task of ApiResponse (ApplicationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationVersion>> ApiV1ApplicationVersionsApplicationVersionKeyGetAsyncWithHttpInfo (string applicationVersionKey)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling ApplicationVersionsApi->ApiV1ApplicationVersionsApplicationVersionKeyGet");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationVersion)));
            
        }

        /// <summary>
        /// Get all applications Returns a list of all applications, including different versions, for the Tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>PagedResourceBaseApplicationVersion</returns>
        public PagedResourceBaseApplicationVersion ApiV1ApplicationVersionsGet (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<PagedResourceBaseApplicationVersion> localVarResponse = ApiV1ApplicationVersionsGetWithHttpInfo(pageSize, pageNumber, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all applications Returns a list of all applications, including different versions, for the Tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>ApiResponse of PagedResourceBaseApplicationVersion</returns>
        public ApiResponse< PagedResourceBaseApplicationVersion > ApiV1ApplicationVersionsGetWithHttpInfo (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/api/v1/applicationVersions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceBaseApplicationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResourceBaseApplicationVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceBaseApplicationVersion)));
            
        }

        /// <summary>
        /// Get all applications Returns a list of all applications, including different versions, for the Tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>Task of PagedResourceBaseApplicationVersion</returns>
        public async System.Threading.Tasks.Task<PagedResourceBaseApplicationVersion> ApiV1ApplicationVersionsGetAsync (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null)
        {
             ApiResponse<PagedResourceBaseApplicationVersion> localVarResponse = await ApiV1ApplicationVersionsGetAsyncWithHttpInfo(pageSize, pageNumber, sortBy, sortOrder);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all applications Returns a list of all applications, including different versions, for the Tenant.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">Determines how results will be sorted. Allowed values: ascending, descending (optional)</param>
        /// <returns>Task of ApiResponse (PagedResourceBaseApplicationVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedResourceBaseApplicationVersion>> ApiV1ApplicationVersionsGetAsyncWithHttpInfo (string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null)
        {

            var localVarPath = "/api/v1/applicationVersions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedResourceBaseApplicationVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedResourceBaseApplicationVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedResourceBaseApplicationVersion)));
            
        }

    }
}
