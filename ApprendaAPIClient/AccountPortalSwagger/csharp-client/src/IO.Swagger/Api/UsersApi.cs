/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdUsersDelete (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdUsersDeleteWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ApiV1RolesRoleIdUsersGet (string roleId);

        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ApiV1RolesRoleIdUsersGetWithHttpInfo (string roleId);
        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns></returns>
        void ApiV1RolesRoleIdUsersPost (string roleId, List<string> body = null);

        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1RolesRoleIdUsersPostWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns></returns>
        void ApiV1UserRolesDelete (string userId, List<string> body = null);

        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1UserRolesDeleteWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 ApiV1UserRolesGet (string userId);

        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> ApiV1UserRolesGetWithHttpInfo (string userId);
        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns></returns>
        void ApiV1UserRolesPost (string userId, List<string> body = null);

        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1UserRolesPostWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Remove a user from the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        void ApiV1UsersDelete (string userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Remove a user from the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiV1UsersDeleteWithHttpInfo (string userId);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Return a list of all users in the Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 ApiV1UsersGet (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Return a list of all users in the Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> ApiV1UsersGetWithHttpInfo (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null);
        /// <summary>
        /// Add a user
        /// </summary>
        /// <remarks>
        /// Add a user to the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>InlineResponse2004AssignedTo</returns>
        InlineResponse2004AssignedTo ApiV1UsersPost (Body4 body = null);

        /// <summary>
        /// Add a user
        /// </summary>
        /// <remarks>
        /// Add a user to the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004AssignedTo</returns>
        ApiResponse<InlineResponse2004AssignedTo> ApiV1UsersPostWithHttpInfo (Body4 body = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2004AssignedTo</returns>
        InlineResponse2004AssignedTo ApiV1UsersPut (string userId, Body3 body = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004AssignedTo</returns>
        ApiResponse<InlineResponse2004AssignedTo> ApiV1UsersPutWithHttpInfo (string userId, Body3 body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsync (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Unsubscribe user from subscription
        /// </summary>
        /// <remarks>
        /// Unsubscribe a user from the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsync (string applicationVersionKey, string locator, string userId);

        /// <summary>
        /// Subscribe user
        /// </summary>
        /// <remarks>
        /// Assign a user to the subscription.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId);
        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdUsersDeleteAsync (string roleId, List<string> body = null);

        /// <summary>
        /// Remove a user from role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ApiV1RolesRoleIdUsersGetAsync (string roleId);

        /// <summary>
        /// Get users of a role
        /// </summary>
        /// <remarks>
        /// Get all users assigned to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1RolesRoleIdUsersPostAsync (string roleId, List<string> body = null);

        /// <summary>
        /// Add users to a role
        /// </summary>
        /// <remarks>
        /// Add the user with the given id to a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo (string roleId, List<string> body = null);
        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1UserRolesDeleteAsync (string userId, List<string> body = null);

        /// <summary>
        /// Remove a user from a role
        /// </summary>
        /// <remarks>
        /// Remove a user from a role.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesDeleteAsyncWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> ApiV1UserRolesGetAsync (string userId);

        /// <summary>
        /// Get the roles of a user
        /// </summary>
        /// <remarks>
        /// Returns a list of all roles a user is assigned to.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1UserRolesGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1UserRolesPostAsync (string userId, List<string> body = null);

        /// <summary>
        /// Assign a user to a role
        /// </summary>
        /// <remarks>
        /// Assign a user to 1 or more roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesPostAsyncWithHttpInfo (string userId, List<string> body = null);
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Remove a user from the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiV1UsersDeleteAsync (string userId);

        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Remove a user from the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UsersDeleteAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Return a list of all users in the Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> ApiV1UsersGetAsync (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null);

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Return a list of all users in the Tenant Account or Development Team.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ApiV1UsersGetAsyncWithHttpInfo (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null);
        /// <summary>
        /// Add a user
        /// </summary>
        /// <remarks>
        /// Add a user to the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>Task of InlineResponse2004AssignedTo</returns>
        System.Threading.Tasks.Task<InlineResponse2004AssignedTo> ApiV1UsersPostAsync (Body4 body = null);

        /// <summary>
        /// Add a user
        /// </summary>
        /// <remarks>
        /// Add a user to the Platform.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004AssignedTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004AssignedTo>> ApiV1UsersPostAsyncWithHttpInfo (Body4 body = null);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2004AssignedTo</returns>
        System.Threading.Tasks.Task<InlineResponse2004AssignedTo> ApiV1UsersPutAsync (string userId, Body3 body = null);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004AssignedTo)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004AssignedTo>> ApiV1UsersPutAsyncWithHttpInfo (string userId, Body3 body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete (string applicationVersionKey, string locator, string userId)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo(applicationVersionKey, locator, userId);
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsync (string applicationVersionKey, string locator, string userId)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo(applicationVersionKey, locator, userId);

        }

        /// <summary>
        /// Unsubscribe user from subscription Unsubscribe a user from the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDeleteAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        public void ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost (string applicationVersionKey, string locator, string userId)
        {
             ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo(applicationVersionKey, locator, userId);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsync (string applicationVersionKey, string locator, string userId)
        {
             await ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo(applicationVersionKey, locator, userId);

        }

        /// <summary>
        /// Subscribe user Assign a user to the subscription.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationVersionKey">Required. Concatenation of application alias and version alias as &#39;AppAlias-VersionAlias&#39;</param>
        /// <param name="locator">Required. Unique Platform assigned locator id of the securable</param>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPostAsyncWithHttpInfo (string applicationVersionKey, string locator, string userId)
        {
            // verify the required parameter 'applicationVersionKey' is set
            if (applicationVersionKey == null)
                throw new ApiException(400, "Missing required parameter 'applicationVersionKey' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'locator' is set
            if (locator == null)
                throw new ApiException(400, "Missing required parameter 'locator' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost");

            var localVarPath = "/api/v1/applicationVersions/{applicationVersionKey}/subscriptions/{locator}/assignedto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (applicationVersionKey != null) localVarPathParams.Add("applicationVersionKey", Configuration.ApiClient.ParameterToString(applicationVersionKey)); // path parameter
            if (locator != null) localVarPathParams.Add("locator", Configuration.ApiClient.ParameterToString(locator)); // path parameter
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1ApplicationVersionsApplicationVersionKeySubscriptionsLocatorAssignedtoPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdUsersDelete (string roleId, List<string> body = null)
        {
             ApiV1RolesRoleIdUsersDeleteWithHttpInfo(roleId, body);
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdUsersDeleteWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersDelete");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdUsersDeleteAsync (string roleId, List<string> body = null)
        {
             await ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo(roleId, body);

        }

        /// <summary>
        /// Remove a user from role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to remove from the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersDeleteAsyncWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersDelete");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ApiV1RolesRoleIdUsersGet (string roleId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = ApiV1RolesRoleIdUsersGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse< InlineResponse2006 > ApiV1RolesRoleIdUsersGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersGet");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
            
        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ApiV1RolesRoleIdUsersGetAsync (string roleId)
        {
             ApiResponse<InlineResponse2006> localVarResponse = await ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users of a role Get all users assigned to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ApiV1RolesRoleIdUsersGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersGet");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2006) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
            
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns></returns>
        public void ApiV1RolesRoleIdUsersPost (string roleId, List<string> body = null)
        {
             ApiV1RolesRoleIdUsersPostWithHttpInfo(roleId, body);
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1RolesRoleIdUsersPostWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersPost");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1RolesRoleIdUsersPostAsync (string roleId, List<string> body = null)
        {
             await ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo(roleId, body);

        }

        /// <summary>
        /// Add users to a role Add the user with the given id to a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Required. Unique Platform assigned id of a role</param>
        /// <param name="body">Array of user ids to add to the role (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1RolesRoleIdUsersPostAsyncWithHttpInfo (string roleId, List<string> body = null)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling UsersApi->ApiV1RolesRoleIdUsersPost");

            var localVarPath = "/api/v1/roles/{roleId}/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleId != null) localVarPathParams.Add("roleId", Configuration.ApiClient.ParameterToString(roleId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RolesRoleIdUsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns></returns>
        public void ApiV1UserRolesDelete (string userId, List<string> body = null)
        {
             ApiV1UserRolesDeleteWithHttpInfo(userId, body);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1UserRolesDeleteWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesDelete");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1UserRolesDeleteAsync (string userId, List<string> body = null)
        {
             await ApiV1UserRolesDeleteAsyncWithHttpInfo(userId, body);

        }

        /// <summary>
        /// Remove a user from a role Remove a user from a role.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to remove the user from (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesDeleteAsyncWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesDelete");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 ApiV1UserRolesGet (string userId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = ApiV1UserRolesGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse< InlineResponse2003 > ApiV1UserRolesGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesGet");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> ApiV1UserRolesGetAsync (string userId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = await ApiV1UserRolesGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the roles of a user Returns a list of all roles a user is assigned to.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> ApiV1UserRolesGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesGet");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2003) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
            
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns></returns>
        public void ApiV1UserRolesPost (string userId, List<string> body = null)
        {
             ApiV1UserRolesPostWithHttpInfo(userId, body);
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1UserRolesPostWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesPost");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1UserRolesPostAsync (string userId, List<string> body = null)
        {
             await ApiV1UserRolesPostAsyncWithHttpInfo(userId, body);

        }

        /// <summary>
        /// Assign a user to a role Assign a user to 1 or more roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <param name="body">Array of role ids to add the user to (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UserRolesPostAsyncWithHttpInfo (string userId, List<string> body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UserRolesPost");

            var localVarPath = "/api/v1/userRoles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UserRolesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete user Remove a user from the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns></returns>
        public void ApiV1UsersDelete (string userId)
        {
             ApiV1UsersDeleteWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete user Remove a user from the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiV1UsersDeleteWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UsersDelete");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete user Remove a user from the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiV1UsersDeleteAsync (string userId)
        {
             await ApiV1UsersDeleteAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Delete user Remove a user from the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiV1UsersDeleteAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UsersDelete");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all users Return a list of all users in the Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 ApiV1UsersGet (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null)
        {
             ApiResponse<InlineResponse2007> localVarResponse = ApiV1UsersGetWithHttpInfo(userId, search, pageSize, pageNumber, sortBy, sortOrder, correlationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users Return a list of all users in the Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > ApiV1UsersGetWithHttpInfo (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null)
        {

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (correlationId != null) localVarQueryParams.Add("correlationId", Configuration.ApiClient.ParameterToString(correlationId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
            
        }

        /// <summary>
        /// Get all users Return a list of all users in the Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> ApiV1UsersGetAsync (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null)
        {
             ApiResponse<InlineResponse2007> localVarResponse = await ApiV1UsersGetAsyncWithHttpInfo(userId, search, pageSize, pageNumber, sortBy, sortOrder, correlationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all users Return a list of all users in the Tenant Account or Development Team.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Required. Unique id of the user (optional)</param>
        /// <param name="search"> (optional)</param>
        /// <param name="pageSize">Number of results to return in a single request. All results will be grouped into pages of this size. Default 20 (optional)</param>
        /// <param name="pageNumber">The page of results to return. Defaults to 0, the first page (optional)</param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="sortOrder">How results should be sorted. Allowed values: ascending, descending (optional)</param>
        /// <param name="correlationId"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ApiV1UsersGetAsyncWithHttpInfo (string userId = null, string search = null, string pageSize = null, string pageNumber = null, string sortBy = null, string sortOrder = null, string correlationId = null)
        {

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (pageNumber != null) localVarQueryParams.Add("pageNumber", Configuration.ApiClient.ParameterToString(pageNumber)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (correlationId != null) localVarQueryParams.Add("correlationId", Configuration.ApiClient.ParameterToString(correlationId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2007) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
            
        }

        /// <summary>
        /// Add a user Add a user to the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>InlineResponse2004AssignedTo</returns>
        public InlineResponse2004AssignedTo ApiV1UsersPost (Body4 body = null)
        {
             ApiResponse<InlineResponse2004AssignedTo> localVarResponse = ApiV1UsersPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a user Add a user to the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004AssignedTo</returns>
        public ApiResponse< InlineResponse2004AssignedTo > ApiV1UsersPostWithHttpInfo (Body4 body = null)
        {

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004AssignedTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004AssignedTo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004AssignedTo)));
            
        }

        /// <summary>
        /// Add a user Add a user to the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>Task of InlineResponse2004AssignedTo</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004AssignedTo> ApiV1UsersPostAsync (Body4 body = null)
        {
             ApiResponse<InlineResponse2004AssignedTo> localVarResponse = await ApiV1UsersPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a user Add a user to the Platform.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User definitions to add (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004AssignedTo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004AssignedTo>> ApiV1UsersPostAsyncWithHttpInfo (Body4 body = null)
        {

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004AssignedTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004AssignedTo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004AssignedTo)));
            
        }

        /// <summary>
        /// Update a user Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>InlineResponse2004AssignedTo</returns>
        public InlineResponse2004AssignedTo ApiV1UsersPut (string userId, Body3 body = null)
        {
             ApiResponse<InlineResponse2004AssignedTo> localVarResponse = ApiV1UsersPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004AssignedTo</returns>
        public ApiResponse< InlineResponse2004AssignedTo > ApiV1UsersPutWithHttpInfo (string userId, Body3 body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UsersPut");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004AssignedTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004AssignedTo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004AssignedTo)));
            
        }

        /// <summary>
        /// Update a user Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InlineResponse2004AssignedTo</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004AssignedTo> ApiV1UsersPutAsync (string userId, Body3 body = null)
        {
             ApiResponse<InlineResponse2004AssignedTo> localVarResponse = await ApiV1UsersPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user Update user information for the given user id. Making a request to this endpoint will update all fields for a user. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004AssignedTo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004AssignedTo>> ApiV1UsersPutAsyncWithHttpInfo (string userId, Body3 body = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->ApiV1UsersPut");

            var localVarPath = "/api/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarQueryParams.Add("userId", Configuration.ApiClient.ParameterToString(userId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1UsersPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004AssignedTo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004AssignedTo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004AssignedTo)));
            
        }

    }
}
