/* 
 * Account Management REST API
 *
 * The Account Management REST API can be used to manage user accounts, roles, and securables for applications on the Platform. The endpoints of this API allow you to perform the same the functionality of the Platform's Account Portal for your Tenant's applications.   For more information, see our documentation on the [Account Portal](/current/account).     ## Authentication    Before making a request, you must be authenticated. Follow these instuctions [to get authenticated](/restapi/accountmanagement/v1/authentication). ## Making a Request   ### Prerequisites    * Installed Platform of version 6.6.0 or later    * An active user account assigned to an active Tenant Account or Developer Team    * Authentication token   ### Request URL    All requests must use **https**.       The URL for every request you make is the URL of your Platform followed by \"/account\" and the path structure of the endpoint. For example, if your Platform URL is https://apps.apprenda.harp and you want to get a list of all user accounts for your Tenant, the request URL will be https://apps.apprenda.harp/account/api/v1/users.     For more information, see our documentation on [using api resources](/restapi/accountmanagement/v1/using-resources) and [finding your Cloud URI](/current/clouduri).    ### Request Headers  Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).    
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing InlineResponse2007
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class InlineResponse2007Tests
    {
        // TODO uncomment below to declare an instance variable for InlineResponse2007
        //private InlineResponse2007 instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of InlineResponse2007
            //instance = new InlineResponse2007();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InlineResponse2007
        /// </summary>
        [Test]
        public void InlineResponse2007InstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" InlineResponse2007
            //Assert.IsInstanceOfType<InlineResponse2007> (instance, "variable 'instance' is a InlineResponse2007");
        }

        /// <summary>
        /// Test the property 'CurrentPage'
        /// </summary>
        [Test]
        public void CurrentPageTest()
        {
            // TODO unit test for the property 'CurrentPage'
        }
        /// <summary>
        /// Test the property 'Href'
        /// </summary>
        [Test]
        public void HrefTest()
        {
            // TODO unit test for the property 'Href'
        }
        /// <summary>
        /// Test the property 'Items'
        /// </summary>
        [Test]
        public void ItemsTest()
        {
            // TODO unit test for the property 'Items'
        }
        /// <summary>
        /// Test the property 'NextPage'
        /// </summary>
        [Test]
        public void NextPageTest()
        {
            // TODO unit test for the property 'NextPage'
        }
        /// <summary>
        /// Test the property 'PageSize'
        /// </summary>
        [Test]
        public void PageSizeTest()
        {
            // TODO unit test for the property 'PageSize'
        }
        /// <summary>
        /// Test the property 'PreviousPage'
        /// </summary>
        [Test]
        public void PreviousPageTest()
        {
            // TODO unit test for the property 'PreviousPage'
        }
        /// <summary>
        /// Test the property 'TotalItems'
        /// </summary>
        [Test]
        public void TotalItemsTest()
        {
            // TODO unit test for the property 'TotalItems'
        }
        /// <summary>
        /// Test the property 'TotalPages'
        /// </summary>
        [Test]
        public void TotalPagesTest()
        {
            // TODO unit test for the property 'TotalPages'
        }

    }

}
