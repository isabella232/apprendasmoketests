/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MonitoringSubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MonitoringSubscriptionsApiTests
    {
        private MonitoringSubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MonitoringSubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MonitoringSubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MonitoringSubscriptionsApi
            //Assert.IsInstanceOfType(typeof(MonitoringSubscriptionsApi), instance, "instance is a MonitoringSubscriptionsApi");
        }

        
        /// <summary>
        /// Test MonitoringSubscriptionsDelete
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //string componentAlias = null;
            //Guid? locator = null;
            //instance.MonitoringSubscriptionsDelete(appAlias, versionAlias, componentAlias, locator);
            
        }
        
        /// <summary>
        /// Test MonitoringSubscriptionsGet
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //var response = instance.MonitoringSubscriptionsGet(appAlias, versionAlias);
            //Assert.IsInstanceOf<List<MonitoringSubscription>> (response, "response is List<MonitoringSubscription>");
        }
        
        /// <summary>
        /// Test MonitoringSubscriptionsGetByComponent
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsGetByComponentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //string componentAlias = null;
            //var response = instance.MonitoringSubscriptionsGetByComponent(appAlias, versionAlias, componentAlias);
            //Assert.IsInstanceOf<List<MonitoringSubscription>> (response, "response is List<MonitoringSubscription>");
        }
        
        /// <summary>
        /// Test MonitoringSubscriptionsGetByLocator
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsGetByLocatorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //string componentAlias = null;
            //Guid? locator = null;
            //var response = instance.MonitoringSubscriptionsGetByLocator(appAlias, versionAlias, componentAlias, locator);
            //Assert.IsInstanceOf<MonitoringSubscription> (response, "response is MonitoringSubscription");
        }
        
        /// <summary>
        /// Test MonitoringSubscriptionsPost
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //string componentAlias = null;
            //MonitoringSubscription monitoringSubscription = null;
            //var response = instance.MonitoringSubscriptionsPost(appAlias, versionAlias, componentAlias, monitoringSubscription);
            //Assert.IsInstanceOf<MonitoringSubscription> (response, "response is MonitoringSubscription");
        }
        
        /// <summary>
        /// Test MonitoringSubscriptionsPut
        /// </summary>
        [Test]
        public void MonitoringSubscriptionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appAlias = null;
            //string versionAlias = null;
            //string componentAlias = null;
            //Guid? locator = null;
            //MonitoringSubscription monitoringSubscription = null;
            //instance.MonitoringSubscriptionsPut(appAlias, versionAlias, componentAlias, locator, monitoringSubscription);
            
        }
        
    }

}
