/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing VersionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class VersionsApiTests
    {
        private VersionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new VersionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of VersionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' VersionsApi
            //Assert.IsInstanceOfType(typeof(VersionsApi), instance, "instance is a VersionsApi");
        }

        
        /// <summary>
        /// Test VersionsDelete
        /// </summary>
        [Test]
        public void VersionsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //var response = instance.VersionsDelete(alias, subAlias);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test VersionsDeleteByAlias
        /// </summary>
        [Test]
        public void VersionsDeleteByAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //var response = instance.VersionsDeleteByAlias(alias, subAlias);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test VersionsGet
        /// </summary>
        [Test]
        public void VersionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.VersionsGet(id);
            //Assert.IsInstanceOf<List<Version>> (response, "response is List<Version>");
        }
        
        /// <summary>
        /// Test VersionsGetAll
        /// </summary>
        [Test]
        public void VersionsGetAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //var response = instance.VersionsGetAll(alias, subAlias);
            //Assert.IsInstanceOf<EnrichedVersion> (response, "response is EnrichedVersion");
        }
        
        /// <summary>
        /// Test VersionsGetByAlias
        /// </summary>
        [Test]
        public void VersionsGetByAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string alias = null;
            //string subAlias = null;
            //var response = instance.VersionsGetByAlias(id, alias, subAlias);
            //Assert.IsInstanceOf<List<Version>> (response, "response is List<Version>");
        }
        
        /// <summary>
        /// Test VersionsGetByIdentifier
        /// </summary>
        [Test]
        public void VersionsGetByIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //string identifier = null;
            //var response = instance.VersionsGetByIdentifier(alias, subAlias, identifier);
            //Assert.IsInstanceOf<ByteArrayContent> (response, "response is ByteArrayContent");
        }
        
        /// <summary>
        /// Test VersionsPost
        /// </summary>
        [Test]
        public void VersionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Version version = null;
            //instance.VersionsPost(id, version);
            
        }
        
        /// <summary>
        /// Test VersionsPostById
        /// </summary>
        [Test]
        public void VersionsPostByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Version version = null;
            //string alias = null;
            //string subAlias = null;
            //instance.VersionsPostById(id, version, alias, subAlias);
            
        }
        
        /// <summary>
        /// Test VersionsPostBySubAlias
        /// </summary>
        [Test]
        public void VersionsPostBySubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //bool? setMaintenanceOff = null;
            //instance.VersionsPostBySubAlias(alias, subAlias, setMaintenanceOff);
            
        }
        
        /// <summary>
        /// Test VersionsPut
        /// </summary>
        [Test]
        public void VersionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //Version version = null;
            //instance.VersionsPut(alias, subAlias, version);
            
        }
        
        /// <summary>
        /// Test VersionsPutIntoAlias
        /// </summary>
        [Test]
        public void VersionsPutIntoAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //Version version = null;
            //instance.VersionsPutIntoAlias(alias, subAlias, version);
            
        }
        
    }

}
