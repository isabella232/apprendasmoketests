/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LogOverride
    /// </summary>
    [DataContract]
    public partial class LogOverride :  IEquatable<LogOverride>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogOverride" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="LogLevel">LogLevel.</param>
        /// <param name="AppAlias">AppAlias.</param>
        /// <param name="AppVersion">AppVersion.</param>
        /// <param name="EmailRecipients">EmailRecipients.</param>
        /// <param name="OverrideType">OverrideType.</param>
        /// <param name="Tag">Tag.</param>
        /// <param name="Subscriber">Subscriber.</param>
        /// <param name="User">User.</param>
        /// <param name="Message">Message.</param>
        /// <param name="Notification">Notification.</param>
        /// <param name="Href">Href.</param>
        public LogOverride(Guid? Id = default(Guid?), int? LogLevel = default(int?), string AppAlias = default(string), string AppVersion = default(string), List<string> EmailRecipients = default(List<string>), string OverrideType = default(string), string Tag = default(string), LogOverrideSubscriber Subscriber = default(LogOverrideSubscriber), LogOverrideUser User = default(LogOverrideUser), string Message = default(string), LogOverrideRepeatAggregationSettings Notification = default(LogOverrideRepeatAggregationSettings), string Href = default(string))
        {
            this.Id = Id;
            this.LogLevel = LogLevel;
            this.AppAlias = AppAlias;
            this.AppVersion = AppVersion;
            this.EmailRecipients = EmailRecipients;
            this.OverrideType = OverrideType;
            this.Tag = Tag;
            this.Subscriber = Subscriber;
            this.User = User;
            this.Message = Message;
            this.Notification = Notification;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets LogLevel
        /// </summary>
        [DataMember(Name="logLevel", EmitDefaultValue=false)]
        public int? LogLevel { get; set; }
        /// <summary>
        /// Gets or Sets AppAlias
        /// </summary>
        [DataMember(Name="appAlias", EmitDefaultValue=false)]
        public string AppAlias { get; set; }
        /// <summary>
        /// Gets or Sets AppVersion
        /// </summary>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }
        /// <summary>
        /// Gets or Sets EmailRecipients
        /// </summary>
        [DataMember(Name="emailRecipients", EmitDefaultValue=false)]
        public List<string> EmailRecipients { get; set; }
        /// <summary>
        /// Gets or Sets OverrideType
        /// </summary>
        [DataMember(Name="overrideType", EmitDefaultValue=false)]
        public string OverrideType { get; set; }
        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }
        /// <summary>
        /// Gets or Sets Subscriber
        /// </summary>
        [DataMember(Name="subscriber", EmitDefaultValue=false)]
        public LogOverrideSubscriber Subscriber { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public LogOverrideUser User { get; set; }
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets Notification
        /// </summary>
        [DataMember(Name="notification", EmitDefaultValue=false)]
        public LogOverrideRepeatAggregationSettings Notification { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LogOverride {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  AppAlias: ").Append(AppAlias).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  EmailRecipients: ").Append(EmailRecipients).Append("\n");
            sb.Append("  OverrideType: ").Append(OverrideType).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Subscriber: ").Append(Subscriber).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Notification: ").Append(Notification).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LogOverride);
        }

        /// <summary>
        /// Returns true if LogOverride instances are equal
        /// </summary>
        /// <param name="other">Instance of LogOverride to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogOverride other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LogLevel == other.LogLevel ||
                    this.LogLevel != null &&
                    this.LogLevel.Equals(other.LogLevel)
                ) && 
                (
                    this.AppAlias == other.AppAlias ||
                    this.AppAlias != null &&
                    this.AppAlias.Equals(other.AppAlias)
                ) && 
                (
                    this.AppVersion == other.AppVersion ||
                    this.AppVersion != null &&
                    this.AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    this.EmailRecipients == other.EmailRecipients ||
                    this.EmailRecipients != null &&
                    this.EmailRecipients.SequenceEqual(other.EmailRecipients)
                ) && 
                (
                    this.OverrideType == other.OverrideType ||
                    this.OverrideType != null &&
                    this.OverrideType.Equals(other.OverrideType)
                ) && 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.Subscriber == other.Subscriber ||
                    this.Subscriber != null &&
                    this.Subscriber.Equals(other.Subscriber)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Notification == other.Notification ||
                    this.Notification != null &&
                    this.Notification.Equals(other.Notification)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LogLevel != null)
                    hash = hash * 59 + this.LogLevel.GetHashCode();
                if (this.AppAlias != null)
                    hash = hash * 59 + this.AppAlias.GetHashCode();
                if (this.AppVersion != null)
                    hash = hash * 59 + this.AppVersion.GetHashCode();
                if (this.EmailRecipients != null)
                    hash = hash * 59 + this.EmailRecipients.GetHashCode();
                if (this.OverrideType != null)
                    hash = hash * 59 + this.OverrideType.GetHashCode();
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.Subscriber != null)
                    hash = hash * 59 + this.Subscriber.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Notification != null)
                    hash = hash * 59 + this.Notification.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
