/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportCardSection
    /// </summary>
    [DataContract]
    public partial class ReportCardSection :  IEquatable<ReportCardSection>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationTypeEnum
        {
            
            /// <summary>
            /// Enum NotApplicable for "NotApplicable"
            /// </summary>
            [EnumMember(Value = "NotApplicable")]
            NotApplicable,
            
            /// <summary>
            /// Enum Promote for "Promote"
            /// </summary>
            [EnumMember(Value = "Promote")]
            Promote,
            
            /// <summary>
            /// Enum Rollback for "Rollback"
            /// </summary>
            [EnumMember(Value = "Rollback")]
            Rollback
        }

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name="operationType", EmitDefaultValue=false)]
        public OperationTypeEnum? OperationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCardSection" /> class.
        /// </summary>
        /// <param name="Title">Title.</param>
        /// <param name="Success">Success.</param>
        /// <param name="Messages">Messages.</param>
        /// <param name="BeginDate">BeginDate.</param>
        /// <param name="EndDate">EndDate.</param>
        /// <param name="Finished">Finished.</param>
        /// <param name="Canceled">Canceled.</param>
        /// <param name="OperationType">OperationType.</param>
        public ReportCardSection(string Title = default(string), bool? Success = default(bool?), List<ReportCardMessage> Messages = default(List<ReportCardMessage>), DateTime? BeginDate = default(DateTime?), DateTime? EndDate = default(DateTime?), bool? Finished = default(bool?), bool? Canceled = default(bool?), OperationTypeEnum? OperationType = default(OperationTypeEnum?))
        {
            this.Title = Title;
            this.Success = Success;
            this.Messages = Messages;
            this.BeginDate = BeginDate;
            this.EndDate = EndDate;
            this.Finished = Finished;
            this.Canceled = Canceled;
            this.OperationType = OperationType;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }
        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<ReportCardMessage> Messages { get; set; }
        /// <summary>
        /// Gets or Sets BeginDate
        /// </summary>
        [DataMember(Name="beginDate", EmitDefaultValue=false)]
        public DateTime? BeginDate { get; set; }
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }
        /// <summary>
        /// Gets or Sets Canceled
        /// </summary>
        [DataMember(Name="canceled", EmitDefaultValue=false)]
        public bool? Canceled { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportCardSection {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Canceled: ").Append(Canceled).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportCardSection);
        }

        /// <summary>
        /// Returns true if ReportCardSection instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportCardSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportCardSection other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.Messages == other.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(other.Messages)
                ) && 
                (
                    this.BeginDate == other.BeginDate ||
                    this.BeginDate != null &&
                    this.BeginDate.Equals(other.BeginDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Finished == other.Finished ||
                    this.Finished != null &&
                    this.Finished.Equals(other.Finished)
                ) && 
                (
                    this.Canceled == other.Canceled ||
                    this.Canceled != null &&
                    this.Canceled.Equals(other.Canceled)
                ) && 
                (
                    this.OperationType == other.OperationType ||
                    this.OperationType != null &&
                    this.OperationType.Equals(other.OperationType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.Messages != null)
                    hash = hash * 59 + this.Messages.GetHashCode();
                if (this.BeginDate != null)
                    hash = hash * 59 + this.BeginDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Finished != null)
                    hash = hash * 59 + this.Finished.GetHashCode();
                if (this.Canceled != null)
                    hash = hash * 59 + this.Canceled.GetHashCode();
                if (this.OperationType != null)
                    hash = hash * 59 + this.OperationType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
