/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// JavaContainerDTO
    /// </summary>
    [DataContract]
    public partial class JavaContainerDTO :  IEquatable<JavaContainerDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ContainerType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContainerTypeEnum
        {
            
            /// <summary>
            /// Enum Tomcat6 for "Tomcat6"
            /// </summary>
            [EnumMember(Value = "Tomcat6")]
            Tomcat6,
            
            /// <summary>
            /// Enum Tomcat7 for "Tomcat7"
            /// </summary>
            [EnumMember(Value = "Tomcat7")]
            Tomcat7,
            
            /// <summary>
            /// Enum JBossEAP6 for "JBossEAP6"
            /// </summary>
            [EnumMember(Value = "JBossEAP6")]
            JBossEAP6
        }

        /// <summary>
        /// Gets or Sets ContainerType
        /// </summary>
        [DataMember(Name="containerType", EmitDefaultValue=false)]
        public ContainerTypeEnum? ContainerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JavaContainerDTO" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ContainerType">ContainerType.</param>
        /// <param name="Path">Path.</param>
        /// <param name="IsEnabled">IsEnabled.</param>
        /// <param name="IsDefault">IsDefault.</param>
        /// <param name="IsSystem">IsSystem.</param>
        public JavaContainerDTO(int? Id = default(int?), string Name = default(string), ContainerTypeEnum? ContainerType = default(ContainerTypeEnum?), string Path = default(string), bool? IsEnabled = default(bool?), bool? IsDefault = default(bool?), bool? IsSystem = default(bool?))
        {
            this.Id = Id;
            this.Name = Name;
            this.ContainerType = ContainerType;
            this.Path = Path;
            this.IsEnabled = IsEnabled;
            this.IsDefault = IsDefault;
            this.IsSystem = IsSystem;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }
        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="isEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Gets or Sets IsSystem
        /// </summary>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public bool? IsSystem { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JavaContainerDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ContainerType: ").Append(ContainerType).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as JavaContainerDTO);
        }

        /// <summary>
        /// Returns true if JavaContainerDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of JavaContainerDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JavaContainerDTO other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ContainerType == other.ContainerType ||
                    this.ContainerType != null &&
                    this.ContainerType.Equals(other.ContainerType)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.IsEnabled == other.IsEnabled ||
                    this.IsEnabled != null &&
                    this.IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.IsSystem == other.IsSystem ||
                    this.IsSystem != null &&
                    this.IsSystem.Equals(other.IsSystem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ContainerType != null)
                    hash = hash * 59 + this.ContainerType.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.IsEnabled != null)
                    hash = hash * 59 + this.IsEnabled.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.IsSystem != null)
                    hash = hash * 59 + this.IsSystem.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
