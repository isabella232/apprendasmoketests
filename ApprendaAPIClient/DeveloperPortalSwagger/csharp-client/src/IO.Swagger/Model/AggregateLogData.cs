/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AggregateLogData
    /// </summary>
    [DataContract]
    public partial class AggregateLogData :  IEquatable<AggregateLogData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregateLogData" /> class.
        /// </summary>
        /// <param name="TotalCount">TotalCount.</param>
        /// <param name="DebugCount">DebugCount.</param>
        /// <param name="InfoCount">InfoCount.</param>
        /// <param name="WarningCount">WarningCount.</param>
        /// <param name="ErrorCount">ErrorCount.</param>
        /// <param name="FatalCount">FatalCount.</param>
        /// <param name="Href">Href.</param>
        public AggregateLogData(int? TotalCount = default(int?), int? DebugCount = default(int?), int? InfoCount = default(int?), int? WarningCount = default(int?), int? ErrorCount = default(int?), int? FatalCount = default(int?), string Href = default(string))
        {
            this.TotalCount = TotalCount;
            this.DebugCount = DebugCount;
            this.InfoCount = InfoCount;
            this.WarningCount = WarningCount;
            this.ErrorCount = ErrorCount;
            this.FatalCount = FatalCount;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        [DataMember(Name="totalCount", EmitDefaultValue=false)]
        public int? TotalCount { get; set; }
        /// <summary>
        /// Gets or Sets DebugCount
        /// </summary>
        [DataMember(Name="debugCount", EmitDefaultValue=false)]
        public int? DebugCount { get; set; }
        /// <summary>
        /// Gets or Sets InfoCount
        /// </summary>
        [DataMember(Name="infoCount", EmitDefaultValue=false)]
        public int? InfoCount { get; set; }
        /// <summary>
        /// Gets or Sets WarningCount
        /// </summary>
        [DataMember(Name="warningCount", EmitDefaultValue=false)]
        public int? WarningCount { get; set; }
        /// <summary>
        /// Gets or Sets ErrorCount
        /// </summary>
        [DataMember(Name="errorCount", EmitDefaultValue=false)]
        public int? ErrorCount { get; set; }
        /// <summary>
        /// Gets or Sets FatalCount
        /// </summary>
        [DataMember(Name="fatalCount", EmitDefaultValue=false)]
        public int? FatalCount { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregateLogData {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  DebugCount: ").Append(DebugCount).Append("\n");
            sb.Append("  InfoCount: ").Append(InfoCount).Append("\n");
            sb.Append("  WarningCount: ").Append(WarningCount).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  FatalCount: ").Append(FatalCount).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AggregateLogData);
        }

        /// <summary>
        /// Returns true if AggregateLogData instances are equal
        /// </summary>
        /// <param name="other">Instance of AggregateLogData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregateLogData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalCount == other.TotalCount ||
                    this.TotalCount != null &&
                    this.TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    this.DebugCount == other.DebugCount ||
                    this.DebugCount != null &&
                    this.DebugCount.Equals(other.DebugCount)
                ) && 
                (
                    this.InfoCount == other.InfoCount ||
                    this.InfoCount != null &&
                    this.InfoCount.Equals(other.InfoCount)
                ) && 
                (
                    this.WarningCount == other.WarningCount ||
                    this.WarningCount != null &&
                    this.WarningCount.Equals(other.WarningCount)
                ) && 
                (
                    this.ErrorCount == other.ErrorCount ||
                    this.ErrorCount != null &&
                    this.ErrorCount.Equals(other.ErrorCount)
                ) && 
                (
                    this.FatalCount == other.FatalCount ||
                    this.FatalCount != null &&
                    this.FatalCount.Equals(other.FatalCount)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalCount != null)
                    hash = hash * 59 + this.TotalCount.GetHashCode();
                if (this.DebugCount != null)
                    hash = hash * 59 + this.DebugCount.GetHashCode();
                if (this.InfoCount != null)
                    hash = hash * 59 + this.InfoCount.GetHashCode();
                if (this.WarningCount != null)
                    hash = hash * 59 + this.WarningCount.GetHashCode();
                if (this.ErrorCount != null)
                    hash = hash * 59 + this.ErrorCount.GetHashCode();
                if (this.FatalCount != null)
                    hash = hash * 59 + this.FatalCount.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
