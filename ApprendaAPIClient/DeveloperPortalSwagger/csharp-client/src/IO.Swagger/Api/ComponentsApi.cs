/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComponentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        void ComponentsDeleteCertificate (string appAlias, string versionAlias, string componentAlias, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComponentsDeleteCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Component&gt;</returns>
        List<Component> ComponentsGet (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        ApiResponse<List<Component>> ComponentsGetWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>EnrichedComponent</returns>
        EnrichedComponent ComponentsGetByIDentifier (string alias, string subAlias, string identifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of EnrichedComponent</returns>
        ApiResponse<EnrichedComponent> ComponentsGetByIDentifierWithHttpInfo (string alias, string subAlias, string identifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Component&gt;</returns>
        List<Component> ComponentsGetBySubAlias (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        ApiResponse<List<Component>> ComponentsGetBySubAliasWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Certificate</returns>
        Certificate ComponentsGetCertificate (string appAlias, string versionAlias, string componentAlias, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Certificate</returns>
        ApiResponse<Certificate> ComponentsGetCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>List&lt;ComponentResource&gt;</returns>
        List<ComponentResource> ComponentsGetFiles (string appAlias, string versionAlias, string componentAlias, string path = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ComponentResource&gt;</returns>
        ApiResponse<List<ComponentResource>> ComponentsGetFilesWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string path = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;Component&gt;</returns>
        List<Component> ComponentsGetScaleByAlias (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        ApiResponse<List<Component>> ComponentsGetScaleByAliasWithHttpInfo (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        void ComponentsPost (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComponentsPostWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        void ComponentsPostActionByIdentifier (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComponentsPostActionByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>List&lt;Certificate&gt;</returns>
        List<Certificate> ComponentsPostCertificate (string appAlias, string versionAlias, string componentAlias, string url = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Certificate&gt;</returns>
        ApiResponse<List<Certificate>> ComponentsPostCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string url = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        void ComponentsPostScaleByIdentifier (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ComponentsPostScaleByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Object</returns>
        Object ComponentsPut (string alias, string subAlias, string identifier, EnrichedComponentModel component);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ComponentsPutWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Object</returns>
        Object ComponentsPutByAlias (string alias, string subAlias, string identifier, EnrichedComponentModel component);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ComponentsPutByAliasWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Object</returns>
        Object ComponentsPutCountByIdentifier (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ComponentsPutCountByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComponentsDeleteCertificateAsync (string appAlias, string versionAlias, string componentAlias, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsDeleteCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        System.Threading.Tasks.Task<List<Component>> ComponentsGetAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of EnrichedComponent</returns>
        System.Threading.Tasks.Task<EnrichedComponent> ComponentsGetByIDentifierAsync (string alias, string subAlias, string identifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (EnrichedComponent)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrichedComponent>> ComponentsGetByIDentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        System.Threading.Tasks.Task<List<Component>> ComponentsGetBySubAliasAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetBySubAliasAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of Certificate</returns>
        System.Threading.Tasks.Task<Certificate> ComponentsGetCertificateAsync (string appAlias, string versionAlias, string componentAlias, string fileName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<Certificate>> ComponentsGetCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>Task of List&lt;ComponentResource&gt;</returns>
        System.Threading.Tasks.Task<List<ComponentResource>> ComponentsGetFilesAsync (string appAlias, string versionAlias, string componentAlias, string path = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ComponentResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ComponentResource>>> ComponentsGetFilesAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string path = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        System.Threading.Tasks.Task<List<Component>> ComponentsGetScaleByAliasAsync (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetScaleByAliasAsyncWithHttpInfo (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComponentsPostAsync (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComponentsPostActionByIdentifierAsync (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostActionByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of List&lt;Certificate&gt;</returns>
        System.Threading.Tasks.Task<List<Certificate>> ComponentsPostCertificateAsync (string appAlias, string versionAlias, string componentAlias, string url = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Certificate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Certificate>>> ComponentsPostCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string url = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComponentsPostScaleByIdentifierAsync (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostScaleByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ComponentsPutAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ComponentsPutByAliasAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutByAliasAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ComponentsPutCountByIdentifierAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutCountByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComponentsApi : IComponentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComponentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComponentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public void ComponentsDeleteCertificate (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
             ComponentsDeleteCertificateWithHttpInfo(appAlias, versionAlias, componentAlias, fileName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ComponentsDeleteCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ComponentsApi->ComponentsDeleteCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsDeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComponentsDeleteCertificateAsync (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
             await ComponentsDeleteCertificateAsyncWithHttpInfo(appAlias, versionAlias, componentAlias, fileName);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsDeleteCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsDeleteCertificate");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ComponentsApi->ComponentsDeleteCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsDeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Component&gt;</returns>
        public List<Component> ComponentsGet (string alias, string subAlias)
        {
             ApiResponse<List<Component>> localVarResponse = ComponentsGetWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        public ApiResponse< List<Component> > ComponentsGetWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGet");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGet");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        public async System.Threading.Tasks.Task<List<Component>> ComponentsGetAsync (string alias, string subAlias)
        {
             ApiResponse<List<Component>> localVarResponse = await ComponentsGetAsyncWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGet");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGet");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>EnrichedComponent</returns>
        public EnrichedComponent ComponentsGetByIDentifier (string alias, string subAlias, string identifier)
        {
             ApiResponse<EnrichedComponent> localVarResponse = ComponentsGetByIDentifierWithHttpInfo(alias, subAlias, identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of EnrichedComponent</returns>
        public ApiResponse< EnrichedComponent > ComponentsGetByIDentifierWithHttpInfo (string alias, string subAlias, string identifier)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetByIDentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetByIDentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsGetByIDentifier");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetByIDentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedComponent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedComponent)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of EnrichedComponent</returns>
        public async System.Threading.Tasks.Task<EnrichedComponent> ComponentsGetByIDentifierAsync (string alias, string subAlias, string identifier)
        {
             ApiResponse<EnrichedComponent> localVarResponse = await ComponentsGetByIDentifierAsyncWithHttpInfo(alias, subAlias, identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (EnrichedComponent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrichedComponent>> ComponentsGetByIDentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetByIDentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetByIDentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsGetByIDentifier");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetByIDentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedComponent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedComponent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedComponent)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Component&gt;</returns>
        public List<Component> ComponentsGetBySubAlias (string alias, string subAlias)
        {
             ApiResponse<List<Component>> localVarResponse = ComponentsGetBySubAliasWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        public ApiResponse< List<Component> > ComponentsGetBySubAliasWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetBySubAlias");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        public async System.Threading.Tasks.Task<List<Component>> ComponentsGetBySubAliasAsync (string alias, string subAlias)
        {
             ApiResponse<List<Component>> localVarResponse = await ComponentsGetBySubAliasAsyncWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetBySubAliasAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetBySubAlias");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Certificate</returns>
        public Certificate ComponentsGetCertificate (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
             ApiResponse<Certificate> localVarResponse = ComponentsGetCertificateWithHttpInfo(appAlias, versionAlias, componentAlias, fileName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>ApiResponse of Certificate</returns>
        public ApiResponse< Certificate > ComponentsGetCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ComponentsApi->ComponentsGetCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Certificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Certificate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Certificate)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of Certificate</returns>
        public async System.Threading.Tasks.Task<Certificate> ComponentsGetCertificateAsync (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
             ApiResponse<Certificate> localVarResponse = await ComponentsGetCertificateAsyncWithHttpInfo(appAlias, versionAlias, componentAlias, fileName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="fileName"></param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Certificate>> ComponentsGetCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string fileName)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetCertificate");
            // verify the required parameter 'fileName' is set
            if (fileName == null)
                throw new ApiException(400, "Missing required parameter 'fileName' when calling ComponentsApi->ComponentsGetCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates/{fileName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (fileName != null) localVarPathParams.Add("fileName", Configuration.ApiClient.ParameterToString(fileName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Certificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Certificate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Certificate)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>List&lt;ComponentResource&gt;</returns>
        public List<ComponentResource> ComponentsGetFiles (string appAlias, string versionAlias, string componentAlias, string path = null)
        {
             ApiResponse<List<ComponentResource>> localVarResponse = ComponentsGetFilesWithHttpInfo(appAlias, versionAlias, componentAlias, path);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ComponentResource&gt;</returns>
        public ApiResponse< List<ComponentResource> > ComponentsGetFilesWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string path = null)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetFiles");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetFiles");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetFiles");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (path != null) localVarQueryParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ComponentResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ComponentResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ComponentResource>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>Task of List&lt;ComponentResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<ComponentResource>> ComponentsGetFilesAsync (string appAlias, string versionAlias, string componentAlias, string path = null)
        {
             ApiResponse<List<ComponentResource>> localVarResponse = await ComponentsGetFilesAsyncWithHttpInfo(appAlias, versionAlias, componentAlias, path);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="path"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ComponentResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ComponentResource>>> ComponentsGetFilesAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string path = null)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetFiles");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetFiles");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetFiles");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (path != null) localVarQueryParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ComponentResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ComponentResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ComponentResource>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>List&lt;Component&gt;</returns>
        public List<Component> ComponentsGetScaleByAlias (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count)
        {
             ApiResponse<List<Component>> localVarResponse = ComponentsGetScaleByAliasWithHttpInfo(alias, subAlias, appAlias, versionAlias, componentAlias, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of List&lt;Component&gt;</returns>
        public ApiResponse< List<Component> > ComponentsGetScaleByAliasWithHttpInfo (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsGetScaleByAlias");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetScaleByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of List&lt;Component&gt;</returns>
        public async System.Threading.Tasks.Task<List<Component>> ComponentsGetScaleByAliasAsync (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count)
        {
             ApiResponse<List<Component>> localVarResponse = await ComponentsGetScaleByAliasAsyncWithHttpInfo(alias, subAlias, appAlias, versionAlias, componentAlias, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (List&lt;Component&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Component>>> ComponentsGetScaleByAliasAsyncWithHttpInfo (string alias, string subAlias, string appAlias, string versionAlias, string componentAlias, string count)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsGetScaleByAlias");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsGetScaleByAlias");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsGetScaleByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Component>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Component>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Component>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        public void ComponentsPost (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
             ComponentsPostWithHttpInfo(alias, subAlias, identifier, action, count, minCount);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ComponentsPostWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPost");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComponentsPostAsync (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
             await ComponentsPostAsyncWithHttpInfo(alias, subAlias, identifier, action, count, minCount);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPost");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPost");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        public void ComponentsPostActionByIdentifier (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
             ComponentsPostActionByIdentifierWithHttpInfo(alias, subAlias, identifier, action, count, minCount);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ComponentsPostActionByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPostActionByIdentifier");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostActionByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComponentsPostActionByIdentifierAsync (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
             await ComponentsPostActionByIdentifierAsyncWithHttpInfo(alias, subAlias, identifier, action, count, minCount);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"> (optional)</param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostActionByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count = null, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPostActionByIdentifier");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPostActionByIdentifier");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostActionByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>List&lt;Certificate&gt;</returns>
        public List<Certificate> ComponentsPostCertificate (string appAlias, string versionAlias, string componentAlias, string url = null)
        {
             ApiResponse<List<Certificate>> localVarResponse = ComponentsPostCertificateWithHttpInfo(appAlias, versionAlias, componentAlias, url);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Certificate&gt;</returns>
        public ApiResponse< List<Certificate> > ComponentsPostCertificateWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string url = null)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPostCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPostCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPostCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Certificate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Certificate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Certificate>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of List&lt;Certificate&gt;</returns>
        public async System.Threading.Tasks.Task<List<Certificate>> ComponentsPostCertificateAsync (string appAlias, string versionAlias, string componentAlias, string url = null)
        {
             ApiResponse<List<Certificate>> localVarResponse = await ComponentsPostCertificateAsyncWithHttpInfo(appAlias, versionAlias, componentAlias, url);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="url"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Certificate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Certificate>>> ComponentsPostCertificateAsyncWithHttpInfo (string appAlias, string versionAlias, string componentAlias, string url = null)
        {
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPostCertificate");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPostCertificate");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPostCertificate");

            var localVarPath = "/api/v1/components/{appAlias}/{versionAlias}/{componentAlias}/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (url != null) localVarQueryParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Certificate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Certificate>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Certificate>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns></returns>
        public void ComponentsPostScaleByIdentifier (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null)
        {
             ComponentsPostScaleByIdentifierWithHttpInfo(alias, subAlias, identifier, action, count, appAlias, versionAlias, componentAlias, minCount);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ComponentsPostScaleByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostScaleByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComponentsPostScaleByIdentifierAsync (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null)
        {
             await ComponentsPostScaleByIdentifierAsyncWithHttpInfo(alias, subAlias, identifier, action, count, appAlias, versionAlias, componentAlias, minCount);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="action"></param>
        /// <param name="count"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="minCount"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPostScaleByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, string action, int? count, string appAlias, string versionAlias, string componentAlias, int? minCount = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPostScaleByIdentifier");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (action != null) localVarQueryParams.Add("action", Configuration.ApiClient.ParameterToString(action)); // query parameter
            if (minCount != null) localVarQueryParams.Add("minCount", Configuration.ApiClient.ParameterToString(minCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPostScaleByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Object</returns>
        public Object ComponentsPut (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
             ApiResponse<Object> localVarResponse = ComponentsPutWithHttpInfo(alias, subAlias, identifier, component);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ComponentsPutWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPut");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ComponentsPutAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
             ApiResponse<Object> localVarResponse = await ComponentsPutAsyncWithHttpInfo(alias, subAlias, identifier, component);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPut");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPut");

            var localVarPath = "/api/v1/Components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Object</returns>
        public Object ComponentsPutByAlias (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
             ApiResponse<Object> localVarResponse = ComponentsPutByAliasWithHttpInfo(alias, subAlias, identifier, component);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ComponentsPutByAliasWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPutByAlias");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPutByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ComponentsPutByAliasAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
             ApiResponse<Object> localVarResponse = await ComponentsPutByAliasAsyncWithHttpInfo(alias, subAlias, identifier, component);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutByAliasAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPutByAlias");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPutByAlias");

            var localVarPath = "/api/v1/Components/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPutByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Object</returns>
        public Object ComponentsPutCountByIdentifier (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count)
        {
             ApiResponse<Object> localVarResponse = ComponentsPutCountByIdentifierWithHttpInfo(alias, subAlias, identifier, component, appAlias, versionAlias, componentAlias, count);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ComponentsPutCountByIdentifierWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsPutCountByIdentifier");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPutCountByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ComponentsPutCountByIdentifierAsync (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count)
        {
             ApiResponse<Object> localVarResponse = await ComponentsPutCountByIdentifierAsyncWithHttpInfo(alias, subAlias, identifier, component, appAlias, versionAlias, componentAlias, count);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <param name="component"></param>
        /// <param name="appAlias"></param>
        /// <param name="versionAlias"></param>
        /// <param name="componentAlias"></param>
        /// <param name="count"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ComponentsPutCountByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier, EnrichedComponentModel component, string appAlias, string versionAlias, string componentAlias, string count)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'component' is set
            if (component == null)
                throw new ApiException(400, "Missing required parameter 'component' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'appAlias' is set
            if (appAlias == null)
                throw new ApiException(400, "Missing required parameter 'appAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'versionAlias' is set
            if (versionAlias == null)
                throw new ApiException(400, "Missing required parameter 'versionAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'componentAlias' is set
            if (componentAlias == null)
                throw new ApiException(400, "Missing required parameter 'componentAlias' when calling ComponentsApi->ComponentsPutCountByIdentifier");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling ComponentsApi->ComponentsPutCountByIdentifier");

            var localVarPath = "/api/v1/Components/{appAlias}/{versionAlias}/{componentAlias}/scale/{count}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (appAlias != null) localVarPathParams.Add("appAlias", Configuration.ApiClient.ParameterToString(appAlias)); // path parameter
            if (versionAlias != null) localVarPathParams.Add("versionAlias", Configuration.ApiClient.ParameterToString(versionAlias)); // path parameter
            if (componentAlias != null) localVarPathParams.Add("componentAlias", Configuration.ApiClient.ParameterToString(componentAlias)); // path parameter
            if (count != null) localVarPathParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // path parameter
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (identifier != null) localVarQueryParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // query parameter
            if (component != null && component.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(component); // http body (model) parameter
            }
            else
            {
                localVarPostBody = component; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ComponentsPutCountByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
