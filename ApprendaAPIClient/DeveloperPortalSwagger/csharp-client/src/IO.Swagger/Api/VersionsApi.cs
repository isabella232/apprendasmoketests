/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using Version = IO.Swagger.Model.Version;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Object</returns>
        Object VersionsDelete (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VersionsDeleteWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Object</returns>
        Object VersionsDeleteByAlias (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VersionsDeleteByAliasWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;Version&gt;</returns>
        List<Version> VersionsGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        ApiResponse<List<Version>> VersionsGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>EnrichedVersion</returns>
        EnrichedVersion VersionsGetAll (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of EnrichedVersion</returns>
        ApiResponse<EnrichedVersion> VersionsGetAllWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Version&gt;</returns>
        List<Version> VersionsGetByAlias (string id, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        ApiResponse<List<Version>> VersionsGetByAliasWithHttpInfo (string id, string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ByteArrayContent</returns>
        ByteArrayContent VersionsGetByIdentifier (string alias, string subAlias, string identifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of ByteArrayContent</returns>
        ApiResponse<ByteArrayContent> VersionsGetByIdentifierWithHttpInfo (string alias, string subAlias, string identifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        void VersionsPost (string id, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionsPostWithHttpInfo (string id, Version version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        void VersionsPostById (string id, Version version, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionsPostByIdWithHttpInfo (string id, Version version, string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns></returns>
        void VersionsPostBySubAlias (string alias, string subAlias, bool? setMaintenanceOff);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionsPostBySubAliasWithHttpInfo (string alias, string subAlias, bool? setMaintenanceOff);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        void VersionsPut (string alias, string subAlias, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionsPutWithHttpInfo (string alias, string subAlias, Version version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        void VersionsPutIntoAlias (string alias, string subAlias, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VersionsPutIntoAliasWithHttpInfo (string alias, string subAlias, Version version);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VersionsDeleteAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsDeleteAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VersionsDeleteByAliasAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsDeleteByAliasAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        System.Threading.Tasks.Task<List<Version>> VersionsGetAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Version>>> VersionsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of EnrichedVersion</returns>
        System.Threading.Tasks.Task<EnrichedVersion> VersionsGetAllAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (EnrichedVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnrichedVersion>> VersionsGetAllAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        System.Threading.Tasks.Task<List<Version>> VersionsGetByAliasAsync (string id, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Version>>> VersionsGetByAliasAsyncWithHttpInfo (string id, string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ByteArrayContent</returns>
        System.Threading.Tasks.Task<ByteArrayContent> VersionsGetByIdentifierAsync (string alias, string subAlias, string identifier);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (ByteArrayContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByteArrayContent>> VersionsGetByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionsPostAsync (string id, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostAsyncWithHttpInfo (string id, Version version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionsPostByIdAsync (string id, Version version, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostByIdAsyncWithHttpInfo (string id, Version version, string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionsPostBySubAliasAsync (string alias, string subAlias, bool? setMaintenanceOff);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostBySubAliasAsyncWithHttpInfo (string alias, string subAlias, bool? setMaintenanceOff);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionsPutAsync (string alias, string subAlias, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPutAsyncWithHttpInfo (string alias, string subAlias, Version version);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VersionsPutIntoAliasAsync (string alias, string subAlias, Version version);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPutIntoAliasAsyncWithHttpInfo (string alias, string subAlias, Version version);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VersionsApi : IVersionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VersionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Object</returns>
        public Object VersionsDelete (string alias, string subAlias)
        {
             ApiResponse<Object> localVarResponse = VersionsDeleteWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > VersionsDeleteWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsDelete");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsDelete");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VersionsDeleteAsync (string alias, string subAlias)
        {
             ApiResponse<Object> localVarResponse = await VersionsDeleteAsyncWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsDeleteAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsDelete");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsDelete");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Object</returns>
        public Object VersionsDeleteByAlias (string alias, string subAlias)
        {
             ApiResponse<Object> localVarResponse = VersionsDeleteByAliasWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > VersionsDeleteByAliasWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsDeleteByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsDeleteByAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsDeleteByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VersionsDeleteByAliasAsync (string alias, string subAlias)
        {
             ApiResponse<Object> localVarResponse = await VersionsDeleteByAliasAsyncWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsDeleteByAliasAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsDeleteByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsDeleteByAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsDeleteByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;Version&gt;</returns>
        public List<Version> VersionsGet (string id)
        {
             ApiResponse<List<Version>> localVarResponse = VersionsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        public ApiResponse< List<Version> > VersionsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsGet");

            var localVarPath = "/api/v1/Versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Version>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Version>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        public async System.Threading.Tasks.Task<List<Version>> VersionsGetAsync (string id)
        {
             ApiResponse<List<Version>> localVarResponse = await VersionsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Version>>> VersionsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsGet");

            var localVarPath = "/api/v1/Versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Version>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Version>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>EnrichedVersion</returns>
        public EnrichedVersion VersionsGetAll (string alias, string subAlias)
        {
             ApiResponse<EnrichedVersion> localVarResponse = VersionsGetAllWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of EnrichedVersion</returns>
        public ApiResponse< EnrichedVersion > VersionsGetAllWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetAll");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetAll");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedVersion)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of EnrichedVersion</returns>
        public async System.Threading.Tasks.Task<EnrichedVersion> VersionsGetAllAsync (string alias, string subAlias)
        {
             ApiResponse<EnrichedVersion> localVarResponse = await VersionsGetAllAsyncWithHttpInfo(alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (EnrichedVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnrichedVersion>> VersionsGetAllAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetAll");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetAll");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnrichedVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnrichedVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnrichedVersion)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>List&lt;Version&gt;</returns>
        public List<Version> VersionsGetByAlias (string id, string alias, string subAlias)
        {
             ApiResponse<List<Version>> localVarResponse = VersionsGetByAliasWithHttpInfo(id, alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of List&lt;Version&gt;</returns>
        public ApiResponse< List<Version> > VersionsGetByAliasWithHttpInfo (string id, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsGetByAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetByAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Version>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Version>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of List&lt;Version&gt;</returns>
        public async System.Threading.Tasks.Task<List<Version>> VersionsGetByAliasAsync (string id, string alias, string subAlias)
        {
             ApiResponse<List<Version>> localVarResponse = await VersionsGetByAliasAsyncWithHttpInfo(id, alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (List&lt;Version&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Version>>> VersionsGetByAliasAsyncWithHttpInfo (string id, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsGetByAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetByAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Version>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Version>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Version>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ByteArrayContent</returns>
        public ByteArrayContent VersionsGetByIdentifier (string alias, string subAlias, string identifier)
        {
             ApiResponse<ByteArrayContent> localVarResponse = VersionsGetByIdentifierWithHttpInfo(alias, subAlias, identifier);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>ApiResponse of ByteArrayContent</returns>
        public ApiResponse< ByteArrayContent > VersionsGetByIdentifierWithHttpInfo (string alias, string subAlias, string identifier)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling VersionsApi->VersionsGetByIdentifier");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ByteArrayContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ByteArrayContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ByteArrayContent)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ByteArrayContent</returns>
        public async System.Threading.Tasks.Task<ByteArrayContent> VersionsGetByIdentifierAsync (string alias, string subAlias, string identifier)
        {
             ApiResponse<ByteArrayContent> localVarResponse = await VersionsGetByIdentifierAsyncWithHttpInfo(alias, subAlias, identifier);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="identifier"></param>
        /// <returns>Task of ApiResponse (ByteArrayContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ByteArrayContent>> VersionsGetByIdentifierAsyncWithHttpInfo (string alias, string subAlias, string identifier)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsGetByIdentifier");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsGetByIdentifier");
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new ApiException(400, "Missing required parameter 'identifier' when calling VersionsApi->VersionsGetByIdentifier");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}/{identifier}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (identifier != null) localVarPathParams.Add("identifier", Configuration.ApiClient.ParameterToString(identifier)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsGetByIdentifier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ByteArrayContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ByteArrayContent) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ByteArrayContent)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public void VersionsPost (string id, Version version)
        {
             VersionsPostWithHttpInfo(id, version);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionsPostWithHttpInfo (string id, Version version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsPost");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPost");

            var localVarPath = "/api/v1/Versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionsPostAsync (string id, Version version)
        {
             await VersionsPostAsyncWithHttpInfo(id, version);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostAsyncWithHttpInfo (string id, Version version)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsPost");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPost");

            var localVarPath = "/api/v1/Versions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        public void VersionsPostById (string id, Version version, string alias, string subAlias)
        {
             VersionsPostByIdWithHttpInfo(id, version, alias, subAlias);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionsPostByIdWithHttpInfo (string id, Version version, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPostById");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPostById", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionsPostByIdAsync (string id, Version version, string alias, string subAlias)
        {
             await VersionsPostByIdAsyncWithHttpInfo(id, version, alias, subAlias);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="version"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostByIdAsyncWithHttpInfo (string id, Version version, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPostById");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPostById");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPostById", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns></returns>
        public void VersionsPostBySubAlias (string alias, string subAlias, bool? setMaintenanceOff)
        {
             VersionsPostBySubAliasWithHttpInfo(alias, subAlias, setMaintenanceOff);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionsPostBySubAliasWithHttpInfo (string alias, string subAlias, bool? setMaintenanceOff)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPostBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPostBySubAlias");
            // verify the required parameter 'setMaintenanceOff' is set
            if (setMaintenanceOff == null)
                throw new ApiException(400, "Missing required parameter 'setMaintenanceOff' when calling VersionsApi->VersionsPostBySubAlias");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (setMaintenanceOff != null) localVarQueryParams.Add("setMaintenanceOff", Configuration.ApiClient.ParameterToString(setMaintenanceOff)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPostBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionsPostBySubAliasAsync (string alias, string subAlias, bool? setMaintenanceOff)
        {
             await VersionsPostBySubAliasAsyncWithHttpInfo(alias, subAlias, setMaintenanceOff);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="setMaintenanceOff"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPostBySubAliasAsyncWithHttpInfo (string alias, string subAlias, bool? setMaintenanceOff)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPostBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPostBySubAlias");
            // verify the required parameter 'setMaintenanceOff' is set
            if (setMaintenanceOff == null)
                throw new ApiException(400, "Missing required parameter 'setMaintenanceOff' when calling VersionsApi->VersionsPostBySubAlias");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (setMaintenanceOff != null) localVarQueryParams.Add("setMaintenanceOff", Configuration.ApiClient.ParameterToString(setMaintenanceOff)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPostBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public void VersionsPut (string alias, string subAlias, Version version)
        {
             VersionsPutWithHttpInfo(alias, subAlias, version);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionsPutWithHttpInfo (string alias, string subAlias, Version version)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPut");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPut");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPut");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionsPutAsync (string alias, string subAlias, Version version)
        {
             await VersionsPutAsyncWithHttpInfo(alias, subAlias, version);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPutAsyncWithHttpInfo (string alias, string subAlias, Version version)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPut");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPut");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPut");

            var localVarPath = "/api/v1/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public void VersionsPutIntoAlias (string alias, string subAlias, Version version)
        {
             VersionsPutIntoAliasWithHttpInfo(alias, subAlias, version);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VersionsPutIntoAliasWithHttpInfo (string alias, string subAlias, Version version)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPutIntoAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPutIntoAlias");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPutIntoAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPutIntoAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VersionsPutIntoAliasAsync (string alias, string subAlias, Version version)
        {
             await VersionsPutIntoAliasAsyncWithHttpInfo(alias, subAlias, version);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="version"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VersionsPutIntoAliasAsyncWithHttpInfo (string alias, string subAlias, Version version)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling VersionsApi->VersionsPutIntoAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling VersionsApi->VersionsPutIntoAlias");
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling VersionsApi->VersionsPutIntoAlias");

            var localVarPath = "/api/v1/Versions/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (version != null && version.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(version); // http body (model) parameter
            }
            else
            {
                localVarPostBody = version; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VersionsPutIntoAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
