/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddOnsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        void AddOnsDelete (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOnsDeleteWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        void AddOnsDeleteByAlias (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddOnsDeleteByAliasWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>AddOnContainer</returns>
        AddOnContainer AddOnsGet (string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of AddOnContainer</returns>
        ApiResponse<AddOnContainer> AddOnsGetWithHttpInfo (string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>EnhancedAddOn</returns>
        EnhancedAddOn AddOnsGetByAlias (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of EnhancedAddOn</returns>
        ApiResponse<EnhancedAddOn> AddOnsGetByAliasWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>AddOnContainer</returns>
        AddOnContainer AddOnsGetBySubAlias (string alias, string subAlias, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of AddOnContainer</returns>
        ApiResponse<AddOnContainer> AddOnsGetBySubAliasWithHttpInfo (string alias, string subAlias, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>DeployedAddOn</returns>
        DeployedAddOn AddOnsPost (string id, ProvisionAddOnOptions options);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>ApiResponse of DeployedAddOn</returns>
        ApiResponse<DeployedAddOn> AddOnsPostWithHttpInfo (string id, ProvisionAddOnOptions options);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>DeployedAddOn</returns>
        DeployedAddOn AddOnsPostToSubAlias (string id, ProvisionAddOnOptions options, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of DeployedAddOn</returns>
        ApiResponse<DeployedAddOn> AddOnsPostToSubAliasWithHttpInfo (string id, ProvisionAddOnOptions options, string alias, string subAlias);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOnsDeleteAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOnsDeleteAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddOnsDeleteByAliasAsync (string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddOnsDeleteByAliasAsyncWithHttpInfo (string alias, string subAlias);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of AddOnContainer</returns>
        System.Threading.Tasks.Task<AddOnContainer> AddOnsGetAsync (string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (AddOnContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOnContainer>> AddOnsGetAsyncWithHttpInfo (string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of EnhancedAddOn</returns>
        System.Threading.Tasks.Task<EnhancedAddOn> AddOnsGetByAliasAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (EnhancedAddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnhancedAddOn>> AddOnsGetByAliasAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of AddOnContainer</returns>
        System.Threading.Tasks.Task<AddOnContainer> AddOnsGetBySubAliasAsync (string alias, string subAlias, string include = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (AddOnContainer)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddOnContainer>> AddOnsGetBySubAliasAsyncWithHttpInfo (string alias, string subAlias, string include = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>Task of DeployedAddOn</returns>
        System.Threading.Tasks.Task<DeployedAddOn> AddOnsPostAsync (string id, ProvisionAddOnOptions options);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>Task of ApiResponse (DeployedAddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeployedAddOn>> AddOnsPostAsyncWithHttpInfo (string id, ProvisionAddOnOptions options);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of DeployedAddOn</returns>
        System.Threading.Tasks.Task<DeployedAddOn> AddOnsPostToSubAliasAsync (string id, ProvisionAddOnOptions options, string alias, string subAlias);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (DeployedAddOn)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeployedAddOn>> AddOnsPostToSubAliasAsyncWithHttpInfo (string id, ProvisionAddOnOptions options, string alias, string subAlias);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddOnsApi : IAddOnsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddOnsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddOnsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddOnsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        public void AddOnsDelete (string alias, string subAlias)
        {
             AddOnsDeleteWithHttpInfo(alias, subAlias);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOnsDeleteWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsDelete");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsDelete");

            var localVarPath = "/api/v1/AddOns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOnsDeleteAsync (string alias, string subAlias)
        {
             await AddOnsDeleteAsyncWithHttpInfo(alias, subAlias);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOnsDeleteAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsDelete");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsDelete");

            var localVarPath = "/api/v1/AddOns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarQueryParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // query parameter
            if (subAlias != null) localVarQueryParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns></returns>
        public void AddOnsDeleteByAlias (string alias, string subAlias)
        {
             AddOnsDeleteByAliasWithHttpInfo(alias, subAlias);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddOnsDeleteByAliasWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsDeleteByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsDeleteByAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsDeleteByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddOnsDeleteByAliasAsync (string alias, string subAlias)
        {
             await AddOnsDeleteByAliasAsyncWithHttpInfo(alias, subAlias);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddOnsDeleteByAliasAsyncWithHttpInfo (string alias, string subAlias)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsDeleteByAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsDeleteByAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsDeleteByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>AddOnContainer</returns>
        public AddOnContainer AddOnsGet (string include = null)
        {
             ApiResponse<AddOnContainer> localVarResponse = AddOnsGetWithHttpInfo(include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of AddOnContainer</returns>
        public ApiResponse< AddOnContainer > AddOnsGetWithHttpInfo (string include = null)
        {

            var localVarPath = "/api/v1/AddOns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddOnContainer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnContainer)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of AddOnContainer</returns>
        public async System.Threading.Tasks.Task<AddOnContainer> AddOnsGetAsync (string include = null)
        {
             ApiResponse<AddOnContainer> localVarResponse = await AddOnsGetAsyncWithHttpInfo(include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (AddOnContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOnContainer>> AddOnsGetAsyncWithHttpInfo (string include = null)
        {

            var localVarPath = "/api/v1/AddOns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddOnContainer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnContainer)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>EnhancedAddOn</returns>
        public EnhancedAddOn AddOnsGetByAlias (string id)
        {
             ApiResponse<EnhancedAddOn> localVarResponse = AddOnsGetByAliasWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of EnhancedAddOn</returns>
        public ApiResponse< EnhancedAddOn > AddOnsGetByAliasWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsGetByAlias");

            var localVarPath = "/api/v1/AddOns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGetByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnhancedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnhancedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnhancedAddOn)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of EnhancedAddOn</returns>
        public async System.Threading.Tasks.Task<EnhancedAddOn> AddOnsGetByAliasAsync (string id)
        {
             ApiResponse<EnhancedAddOn> localVarResponse = await AddOnsGetByAliasAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (EnhancedAddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EnhancedAddOn>> AddOnsGetByAliasAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsGetByAlias");

            var localVarPath = "/api/v1/AddOns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGetByAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EnhancedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EnhancedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EnhancedAddOn)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>AddOnContainer</returns>
        public AddOnContainer AddOnsGetBySubAlias (string alias, string subAlias, string include = null)
        {
             ApiResponse<AddOnContainer> localVarResponse = AddOnsGetBySubAliasWithHttpInfo(alias, subAlias, include);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>ApiResponse of AddOnContainer</returns>
        public ApiResponse< AddOnContainer > AddOnsGetBySubAliasWithHttpInfo (string alias, string subAlias, string include = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsGetBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsGetBySubAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGetBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddOnContainer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnContainer)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of AddOnContainer</returns>
        public async System.Threading.Tasks.Task<AddOnContainer> AddOnsGetBySubAliasAsync (string alias, string subAlias, string include = null)
        {
             ApiResponse<AddOnContainer> localVarResponse = await AddOnsGetBySubAliasAsyncWithHttpInfo(alias, subAlias, include);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <param name="include"> (optional)</param>
        /// <returns>Task of ApiResponse (AddOnContainer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddOnContainer>> AddOnsGetBySubAliasAsyncWithHttpInfo (string alias, string subAlias, string include = null)
        {
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsGetBySubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsGetBySubAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (include != null) localVarQueryParams.Add("include", Configuration.ApiClient.ParameterToString(include)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsGetBySubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddOnContainer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddOnContainer) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddOnContainer)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>DeployedAddOn</returns>
        public DeployedAddOn AddOnsPost (string id, ProvisionAddOnOptions options)
        {
             ApiResponse<DeployedAddOn> localVarResponse = AddOnsPostWithHttpInfo(id, options);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>ApiResponse of DeployedAddOn</returns>
        public ApiResponse< DeployedAddOn > AddOnsPostWithHttpInfo (string id, ProvisionAddOnOptions options)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsPost");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AddOnsApi->AddOnsPost");

            var localVarPath = "/api/v1/AddOns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeployedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployedAddOn)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>Task of DeployedAddOn</returns>
        public async System.Threading.Tasks.Task<DeployedAddOn> AddOnsPostAsync (string id, ProvisionAddOnOptions options)
        {
             ApiResponse<DeployedAddOn> localVarResponse = await AddOnsPostAsyncWithHttpInfo(id, options);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <returns>Task of ApiResponse (DeployedAddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeployedAddOn>> AddOnsPostAsyncWithHttpInfo (string id, ProvisionAddOnOptions options)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsPost");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AddOnsApi->AddOnsPost");

            var localVarPath = "/api/v1/AddOns/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeployedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployedAddOn)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>DeployedAddOn</returns>
        public DeployedAddOn AddOnsPostToSubAlias (string id, ProvisionAddOnOptions options, string alias, string subAlias)
        {
             ApiResponse<DeployedAddOn> localVarResponse = AddOnsPostToSubAliasWithHttpInfo(id, options, alias, subAlias);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>ApiResponse of DeployedAddOn</returns>
        public ApiResponse< DeployedAddOn > AddOnsPostToSubAliasWithHttpInfo (string id, ProvisionAddOnOptions options, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsPostToSubAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsPostToSubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeployedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployedAddOn)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of DeployedAddOn</returns>
        public async System.Threading.Tasks.Task<DeployedAddOn> AddOnsPostToSubAliasAsync (string id, ProvisionAddOnOptions options, string alias, string subAlias)
        {
             ApiResponse<DeployedAddOn> localVarResponse = await AddOnsPostToSubAliasAsyncWithHttpInfo(id, options, alias, subAlias);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="options"></param>
        /// <param name="alias"></param>
        /// <param name="subAlias"></param>
        /// <returns>Task of ApiResponse (DeployedAddOn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeployedAddOn>> AddOnsPostToSubAliasAsyncWithHttpInfo (string id, ProvisionAddOnOptions options, string alias, string subAlias)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'options' is set
            if (options == null)
                throw new ApiException(400, "Missing required parameter 'options' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'alias' is set
            if (alias == null)
                throw new ApiException(400, "Missing required parameter 'alias' when calling AddOnsApi->AddOnsPostToSubAlias");
            // verify the required parameter 'subAlias' is set
            if (subAlias == null)
                throw new ApiException(400, "Missing required parameter 'subAlias' when calling AddOnsApi->AddOnsPostToSubAlias");

            var localVarPath = "/api/v1/AddOns/{alias}/{subAlias}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (alias != null) localVarPathParams.Add("alias", Configuration.ApiClient.ParameterToString(alias)); // path parameter
            if (subAlias != null) localVarPathParams.Add("subAlias", Configuration.ApiClient.ParameterToString(subAlias)); // path parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (options != null && options.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(options); // http body (model) parameter
            }
            else
            {
                localVarPostBody = options; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOnsPostToSubAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeployedAddOn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeployedAddOn) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeployedAddOn)));
            
        }

    }
}
