/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Component
    /// </summary>
    [DataContract]
    public partial class Component :  IEquatable<Component>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PipelineMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PipelineModeEnum
        {
            
            /// <summary>
            /// Enum Integrated for "Integrated"
            /// </summary>
            [EnumMember(Value = "Integrated")]
            Integrated,
            
            /// <summary>
            /// Enum Classic for "Classic"
            /// </summary>
            [EnumMember(Value = "Classic")]
            Classic
        }

        /// <summary>
        /// Gets or Sets ScalingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScalingTypeEnum
        {
            
            /// <summary>
            /// Enum Manual for "Manual"
            /// </summary>
            [EnumMember(Value = "Manual")]
            Manual,
            
            /// <summary>
            /// Enum Scheduled for "Scheduled"
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            Scheduled,
            
            /// <summary>
            /// Enum Automatic for "Automatic"
            /// </summary>
            [EnumMember(Value = "Automatic")]
            Automatic
        }

        /// <summary>
        /// Gets or Sets PipelineMode
        /// </summary>
        [DataMember(Name="pipelineMode", EmitDefaultValue=false)]
        public PipelineModeEnum? PipelineMode { get; set; }
        /// <summary>
        /// Gets or Sets ScalingType
        /// </summary>
        [DataMember(Name="scalingType", EmitDefaultValue=false)]
        public ScalingTypeEnum? ScalingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Component" /> class.
        /// </summary>
        /// <param name="PipelineMode">PipelineMode.</param>
        /// <param name="EnvironmentVariables">EnvironmentVariables.</param>
        /// <param name="SystemProperties">SystemProperties.</param>
        /// <param name="Certificates">Certificates.</param>
        /// <param name="Runtime">Runtime.</param>
        /// <param name="LogPattern">LogPattern.</param>
        /// <param name="Container">Container.</param>
        /// <param name="JmxEnabled">JmxEnabled.</param>
        /// <param name="Instances">Instances.</param>
        /// <param name="StorageBlocks">StorageBlocks.</param>
        /// <param name="MinimumInstanceCount">MinimumInstanceCount.</param>
        /// <param name="MaximumInstanceCount">MaximumInstanceCount.</param>
        /// <param name="HttpMapped">HttpMapped.</param>
        /// <param name="Files">Files.</param>
        /// <param name="ScalingType">ScalingType.</param>
        /// <param name="IsOperatorOverride">IsOperatorOverride.</param>
        /// <param name="MonitoringConnectionDetails">MonitoringConnectionDetails.</param>
        /// <param name="ScalingSchedule">ScalingSchedule.</param>
        /// <param name="Domain">Domain.</param>
        /// <param name="Username">Username.</param>
        /// <param name="Password">Password.</param>
        /// <param name="Version">Version.</param>
        /// <param name="StorageQuota">StorageQuota.</param>
        /// <param name="ResourcePolicy">ResourcePolicy.</param>
        /// <param name="CustomProperties">CustomProperties.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Alias">Alias.</param>
        /// <param name="Href">Href.</param>
        public Component(PipelineModeEnum? PipelineMode = default(PipelineModeEnum?), List<Apiv1ComponentsEnvironmentVariables> EnvironmentVariables = default(List<Apiv1ComponentsEnvironmentVariables>), List<Apiv1ComponentsEnvironmentVariables> SystemProperties = default(List<Apiv1ComponentsEnvironmentVariables>), List<InlineResponse2007> Certificates = default(List<InlineResponse2007>), string Runtime = default(string), string LogPattern = default(string), string Container = default(string), bool? JmxEnabled = default(bool?), InlineResponse200Instances Instances = default(InlineResponse200Instances), long? StorageBlocks = default(long?), int? MinimumInstanceCount = default(int?), int? MaximumInstanceCount = default(int?), bool? HttpMapped = default(bool?), InlineResponse200Icon Files = default(InlineResponse200Icon), ScalingTypeEnum? ScalingType = default(ScalingTypeEnum?), bool? IsOperatorOverride = default(bool?), List<Apiv1ComponentsMonitoringConnectionDetails> MonitoringConnectionDetails = default(List<Apiv1ComponentsMonitoringConnectionDetails>), List<Apiv1ComponentsScalingSchedule> ScalingSchedule = default(List<Apiv1ComponentsScalingSchedule>), string Domain = default(string), string Username = default(string), string Password = default(string), InlineResponse200Icon Version = default(InlineResponse200Icon), InlineResponse2002Cloud StorageQuota = default(InlineResponse2002Cloud), InlineResponse2002Cloud ResourcePolicy = default(InlineResponse2002Cloud), InlineResponse200Icon CustomProperties = default(InlineResponse200Icon), string Name = default(string), string Type = default(string), string Alias = default(string), string Href = default(string))
        {
            this.PipelineMode = PipelineMode;
            this.EnvironmentVariables = EnvironmentVariables;
            this.SystemProperties = SystemProperties;
            this.Certificates = Certificates;
            this.Runtime = Runtime;
            this.LogPattern = LogPattern;
            this.Container = Container;
            this.JmxEnabled = JmxEnabled;
            this.Instances = Instances;
            this.StorageBlocks = StorageBlocks;
            this.MinimumInstanceCount = MinimumInstanceCount;
            this.MaximumInstanceCount = MaximumInstanceCount;
            this.HttpMapped = HttpMapped;
            this.Files = Files;
            this.ScalingType = ScalingType;
            this.IsOperatorOverride = IsOperatorOverride;
            this.MonitoringConnectionDetails = MonitoringConnectionDetails;
            this.ScalingSchedule = ScalingSchedule;
            this.Domain = Domain;
            this.Username = Username;
            this.Password = Password;
            this.Version = Version;
            this.StorageQuota = StorageQuota;
            this.ResourcePolicy = ResourcePolicy;
            this.CustomProperties = CustomProperties;
            this.Name = Name;
            this.Type = Type;
            this.Alias = Alias;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets EnvironmentVariables
        /// </summary>
        [DataMember(Name="environmentVariables", EmitDefaultValue=false)]
        public List<Apiv1ComponentsEnvironmentVariables> EnvironmentVariables { get; set; }
        /// <summary>
        /// Gets or Sets SystemProperties
        /// </summary>
        [DataMember(Name="systemProperties", EmitDefaultValue=false)]
        public List<Apiv1ComponentsEnvironmentVariables> SystemProperties { get; set; }
        /// <summary>
        /// Gets or Sets Certificates
        /// </summary>
        [DataMember(Name="certificates", EmitDefaultValue=false)]
        public List<InlineResponse2007> Certificates { get; set; }
        /// <summary>
        /// Gets or Sets Runtime
        /// </summary>
        [DataMember(Name="runtime", EmitDefaultValue=false)]
        public string Runtime { get; set; }
        /// <summary>
        /// Gets or Sets LogPattern
        /// </summary>
        [DataMember(Name="logPattern", EmitDefaultValue=false)]
        public string LogPattern { get; set; }
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="container", EmitDefaultValue=false)]
        public string Container { get; set; }
        /// <summary>
        /// Gets or Sets JmxEnabled
        /// </summary>
        [DataMember(Name="jmxEnabled", EmitDefaultValue=false)]
        public bool? JmxEnabled { get; set; }
        /// <summary>
        /// Gets or Sets Instances
        /// </summary>
        [DataMember(Name="instances", EmitDefaultValue=false)]
        public InlineResponse200Instances Instances { get; set; }
        /// <summary>
        /// Gets or Sets StorageBlocks
        /// </summary>
        [DataMember(Name="storageBlocks", EmitDefaultValue=false)]
        public long? StorageBlocks { get; set; }
        /// <summary>
        /// Gets or Sets MinimumInstanceCount
        /// </summary>
        [DataMember(Name="minimumInstanceCount", EmitDefaultValue=false)]
        public int? MinimumInstanceCount { get; set; }
        /// <summary>
        /// Gets or Sets MaximumInstanceCount
        /// </summary>
        [DataMember(Name="maximumInstanceCount", EmitDefaultValue=false)]
        public int? MaximumInstanceCount { get; set; }
        /// <summary>
        /// Gets or Sets HttpMapped
        /// </summary>
        [DataMember(Name="httpMapped", EmitDefaultValue=false)]
        public bool? HttpMapped { get; set; }
        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public InlineResponse200Icon Files { get; set; }
        /// <summary>
        /// Gets or Sets IsOperatorOverride
        /// </summary>
        [DataMember(Name="isOperatorOverride", EmitDefaultValue=false)]
        public bool? IsOperatorOverride { get; set; }
        /// <summary>
        /// Gets or Sets MonitoringConnectionDetails
        /// </summary>
        [DataMember(Name="monitoringConnectionDetails", EmitDefaultValue=false)]
        public List<Apiv1ComponentsMonitoringConnectionDetails> MonitoringConnectionDetails { get; set; }
        /// <summary>
        /// Gets or Sets ScalingSchedule
        /// </summary>
        [DataMember(Name="scalingSchedule", EmitDefaultValue=false)]
        public List<Apiv1ComponentsScalingSchedule> ScalingSchedule { get; set; }
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="domain", EmitDefaultValue=false)]
        public string Domain { get; set; }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public InlineResponse200Icon Version { get; set; }
        /// <summary>
        /// Gets or Sets StorageQuota
        /// </summary>
        [DataMember(Name="storageQuota", EmitDefaultValue=false)]
        public InlineResponse2002Cloud StorageQuota { get; set; }
        /// <summary>
        /// Gets or Sets ResourcePolicy
        /// </summary>
        [DataMember(Name="resourcePolicy", EmitDefaultValue=false)]
        public InlineResponse2002Cloud ResourcePolicy { get; set; }
        /// <summary>
        /// Gets or Sets CustomProperties
        /// </summary>
        [DataMember(Name="customProperties", EmitDefaultValue=false)]
        public InlineResponse200Icon CustomProperties { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Component {\n");
            sb.Append("  PipelineMode: ").Append(PipelineMode).Append("\n");
            sb.Append("  EnvironmentVariables: ").Append(EnvironmentVariables).Append("\n");
            sb.Append("  SystemProperties: ").Append(SystemProperties).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  LogPattern: ").Append(LogPattern).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  JmxEnabled: ").Append(JmxEnabled).Append("\n");
            sb.Append("  Instances: ").Append(Instances).Append("\n");
            sb.Append("  StorageBlocks: ").Append(StorageBlocks).Append("\n");
            sb.Append("  MinimumInstanceCount: ").Append(MinimumInstanceCount).Append("\n");
            sb.Append("  MaximumInstanceCount: ").Append(MaximumInstanceCount).Append("\n");
            sb.Append("  HttpMapped: ").Append(HttpMapped).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  ScalingType: ").Append(ScalingType).Append("\n");
            sb.Append("  IsOperatorOverride: ").Append(IsOperatorOverride).Append("\n");
            sb.Append("  MonitoringConnectionDetails: ").Append(MonitoringConnectionDetails).Append("\n");
            sb.Append("  ScalingSchedule: ").Append(ScalingSchedule).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  StorageQuota: ").Append(StorageQuota).Append("\n");
            sb.Append("  ResourcePolicy: ").Append(ResourcePolicy).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Component);
        }

        /// <summary>
        /// Returns true if Component instances are equal
        /// </summary>
        /// <param name="other">Instance of Component to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Component other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.PipelineMode == other.PipelineMode ||
                    this.PipelineMode != null &&
                    this.PipelineMode.Equals(other.PipelineMode)
                ) && 
                (
                    this.EnvironmentVariables == other.EnvironmentVariables ||
                    this.EnvironmentVariables != null &&
                    this.EnvironmentVariables.SequenceEqual(other.EnvironmentVariables)
                ) && 
                (
                    this.SystemProperties == other.SystemProperties ||
                    this.SystemProperties != null &&
                    this.SystemProperties.SequenceEqual(other.SystemProperties)
                ) && 
                (
                    this.Certificates == other.Certificates ||
                    this.Certificates != null &&
                    this.Certificates.SequenceEqual(other.Certificates)
                ) && 
                (
                    this.Runtime == other.Runtime ||
                    this.Runtime != null &&
                    this.Runtime.Equals(other.Runtime)
                ) && 
                (
                    this.LogPattern == other.LogPattern ||
                    this.LogPattern != null &&
                    this.LogPattern.Equals(other.LogPattern)
                ) && 
                (
                    this.Container == other.Container ||
                    this.Container != null &&
                    this.Container.Equals(other.Container)
                ) && 
                (
                    this.JmxEnabled == other.JmxEnabled ||
                    this.JmxEnabled != null &&
                    this.JmxEnabled.Equals(other.JmxEnabled)
                ) && 
                (
                    this.Instances == other.Instances ||
                    this.Instances != null &&
                    this.Instances.Equals(other.Instances)
                ) && 
                (
                    this.StorageBlocks == other.StorageBlocks ||
                    this.StorageBlocks != null &&
                    this.StorageBlocks.Equals(other.StorageBlocks)
                ) && 
                (
                    this.MinimumInstanceCount == other.MinimumInstanceCount ||
                    this.MinimumInstanceCount != null &&
                    this.MinimumInstanceCount.Equals(other.MinimumInstanceCount)
                ) && 
                (
                    this.MaximumInstanceCount == other.MaximumInstanceCount ||
                    this.MaximumInstanceCount != null &&
                    this.MaximumInstanceCount.Equals(other.MaximumInstanceCount)
                ) && 
                (
                    this.HttpMapped == other.HttpMapped ||
                    this.HttpMapped != null &&
                    this.HttpMapped.Equals(other.HttpMapped)
                ) && 
                (
                    this.Files == other.Files ||
                    this.Files != null &&
                    this.Files.Equals(other.Files)
                ) && 
                (
                    this.ScalingType == other.ScalingType ||
                    this.ScalingType != null &&
                    this.ScalingType.Equals(other.ScalingType)
                ) && 
                (
                    this.IsOperatorOverride == other.IsOperatorOverride ||
                    this.IsOperatorOverride != null &&
                    this.IsOperatorOverride.Equals(other.IsOperatorOverride)
                ) && 
                (
                    this.MonitoringConnectionDetails == other.MonitoringConnectionDetails ||
                    this.MonitoringConnectionDetails != null &&
                    this.MonitoringConnectionDetails.SequenceEqual(other.MonitoringConnectionDetails)
                ) && 
                (
                    this.ScalingSchedule == other.ScalingSchedule ||
                    this.ScalingSchedule != null &&
                    this.ScalingSchedule.SequenceEqual(other.ScalingSchedule)
                ) && 
                (
                    this.Domain == other.Domain ||
                    this.Domain != null &&
                    this.Domain.Equals(other.Domain)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.StorageQuota == other.StorageQuota ||
                    this.StorageQuota != null &&
                    this.StorageQuota.Equals(other.StorageQuota)
                ) && 
                (
                    this.ResourcePolicy == other.ResourcePolicy ||
                    this.ResourcePolicy != null &&
                    this.ResourcePolicy.Equals(other.ResourcePolicy)
                ) && 
                (
                    this.CustomProperties == other.CustomProperties ||
                    this.CustomProperties != null &&
                    this.CustomProperties.Equals(other.CustomProperties)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.PipelineMode != null)
                    hash = hash * 59 + this.PipelineMode.GetHashCode();
                if (this.EnvironmentVariables != null)
                    hash = hash * 59 + this.EnvironmentVariables.GetHashCode();
                if (this.SystemProperties != null)
                    hash = hash * 59 + this.SystemProperties.GetHashCode();
                if (this.Certificates != null)
                    hash = hash * 59 + this.Certificates.GetHashCode();
                if (this.Runtime != null)
                    hash = hash * 59 + this.Runtime.GetHashCode();
                if (this.LogPattern != null)
                    hash = hash * 59 + this.LogPattern.GetHashCode();
                if (this.Container != null)
                    hash = hash * 59 + this.Container.GetHashCode();
                if (this.JmxEnabled != null)
                    hash = hash * 59 + this.JmxEnabled.GetHashCode();
                if (this.Instances != null)
                    hash = hash * 59 + this.Instances.GetHashCode();
                if (this.StorageBlocks != null)
                    hash = hash * 59 + this.StorageBlocks.GetHashCode();
                if (this.MinimumInstanceCount != null)
                    hash = hash * 59 + this.MinimumInstanceCount.GetHashCode();
                if (this.MaximumInstanceCount != null)
                    hash = hash * 59 + this.MaximumInstanceCount.GetHashCode();
                if (this.HttpMapped != null)
                    hash = hash * 59 + this.HttpMapped.GetHashCode();
                if (this.Files != null)
                    hash = hash * 59 + this.Files.GetHashCode();
                if (this.ScalingType != null)
                    hash = hash * 59 + this.ScalingType.GetHashCode();
                if (this.IsOperatorOverride != null)
                    hash = hash * 59 + this.IsOperatorOverride.GetHashCode();
                if (this.MonitoringConnectionDetails != null)
                    hash = hash * 59 + this.MonitoringConnectionDetails.GetHashCode();
                if (this.ScalingSchedule != null)
                    hash = hash * 59 + this.ScalingSchedule.GetHashCode();
                if (this.Domain != null)
                    hash = hash * 59 + this.Domain.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.StorageQuota != null)
                    hash = hash * 59 + this.StorageQuota.GetHashCode();
                if (this.ResourcePolicy != null)
                    hash = hash * 59 + this.ResourcePolicy.GetHashCode();
                if (this.CustomProperties != null)
                    hash = hash * 59 + this.CustomProperties.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
