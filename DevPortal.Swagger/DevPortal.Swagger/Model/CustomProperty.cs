/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CustomProperty
    /// </summary>
    [DataContract]
    public partial class CustomProperty :  IEquatable<CustomProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomProperty" /> class.
        /// </summary>
        /// <param name="Version">Version.</param>
        /// <param name="ReferencedObject">ReferencedObject.</param>
        /// <param name="PropertyModel">PropertyModel.</param>
        /// <param name="Values">Values.</param>
        /// <param name="Href">Href.</param>
        public CustomProperty(InlineResponse200Icon Version = default(InlineResponse200Icon), InlineResponse200Icon ReferencedObject = default(InlineResponse200Icon), InlineResponse20011 PropertyModel = default(InlineResponse20011), List<string> Values = default(List<string>), string Href = default(string))
        {
            this.Version = Version;
            this.ReferencedObject = ReferencedObject;
            this.PropertyModel = PropertyModel;
            this.Values = Values;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public InlineResponse200Icon Version { get; set; }
        /// <summary>
        /// Gets or Sets ReferencedObject
        /// </summary>
        [DataMember(Name="referencedObject", EmitDefaultValue=false)]
        public InlineResponse200Icon ReferencedObject { get; set; }
        /// <summary>
        /// Gets or Sets PropertyModel
        /// </summary>
        [DataMember(Name="propertyModel", EmitDefaultValue=false)]
        public InlineResponse20011 PropertyModel { get; set; }
        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomProperty {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  ReferencedObject: ").Append(ReferencedObject).Append("\n");
            sb.Append("  PropertyModel: ").Append(PropertyModel).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CustomProperty);
        }

        /// <summary>
        /// Returns true if CustomProperty instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomProperty other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.ReferencedObject == other.ReferencedObject ||
                    this.ReferencedObject != null &&
                    this.ReferencedObject.Equals(other.ReferencedObject)
                ) && 
                (
                    this.PropertyModel == other.PropertyModel ||
                    this.PropertyModel != null &&
                    this.PropertyModel.Equals(other.PropertyModel)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.ReferencedObject != null)
                    hash = hash * 59 + this.ReferencedObject.GetHashCode();
                if (this.PropertyModel != null)
                    hash = hash * 59 + this.PropertyModel.GetHashCode();
                if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
