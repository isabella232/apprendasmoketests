/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UtilizationAggregate
    /// </summary>
    [DataContract]
    public partial class UtilizationAggregate :  IEquatable<UtilizationAggregate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilizationAggregate" /> class.
        /// </summary>
        /// <param name="SampleCount">SampleCount.</param>
        /// <param name="MinimumCpuUsage">MinimumCpuUsage.</param>
        /// <param name="AverageCpuUsage">AverageCpuUsage.</param>
        /// <param name="MaximumCpuUsage">MaximumCpuUsage.</param>
        /// <param name="StandardDeviationCpuUsage">StandardDeviationCpuUsage.</param>
        /// <param name="MinimumMemoryUsage">MinimumMemoryUsage.</param>
        /// <param name="AverageMemoryUsage">AverageMemoryUsage.</param>
        /// <param name="MaximumMemoryUsage">MaximumMemoryUsage.</param>
        /// <param name="StandardDeviationMemoryUsage">StandardDeviationMemoryUsage.</param>
        /// <param name="Workload">Workload.</param>
        /// <param name="IsPolicyApplicable">IsPolicyApplicable.</param>
        /// <param name="Href">Href.</param>
        public UtilizationAggregate(int? SampleCount = default(int?), double? MinimumCpuUsage = default(double?), double? AverageCpuUsage = default(double?), double? MaximumCpuUsage = default(double?), double? StandardDeviationCpuUsage = default(double?), double? MinimumMemoryUsage = default(double?), double? AverageMemoryUsage = default(double?), double? MaximumMemoryUsage = default(double?), double? StandardDeviationMemoryUsage = default(double?), InlineResponse200Icon Workload = default(InlineResponse200Icon), bool? IsPolicyApplicable = default(bool?), string Href = default(string))
        {
            this.SampleCount = SampleCount;
            this.MinimumCpuUsage = MinimumCpuUsage;
            this.AverageCpuUsage = AverageCpuUsage;
            this.MaximumCpuUsage = MaximumCpuUsage;
            this.StandardDeviationCpuUsage = StandardDeviationCpuUsage;
            this.MinimumMemoryUsage = MinimumMemoryUsage;
            this.AverageMemoryUsage = AverageMemoryUsage;
            this.MaximumMemoryUsage = MaximumMemoryUsage;
            this.StandardDeviationMemoryUsage = StandardDeviationMemoryUsage;
            this.Workload = Workload;
            this.IsPolicyApplicable = IsPolicyApplicable;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets SampleCount
        /// </summary>
        [DataMember(Name="sampleCount", EmitDefaultValue=false)]
        public int? SampleCount { get; set; }
        /// <summary>
        /// Gets or Sets MinimumCpuUsage
        /// </summary>
        [DataMember(Name="minimumCpuUsage", EmitDefaultValue=false)]
        public double? MinimumCpuUsage { get; set; }
        /// <summary>
        /// Gets or Sets AverageCpuUsage
        /// </summary>
        [DataMember(Name="averageCpuUsage", EmitDefaultValue=false)]
        public double? AverageCpuUsage { get; set; }
        /// <summary>
        /// Gets or Sets MaximumCpuUsage
        /// </summary>
        [DataMember(Name="maximumCpuUsage", EmitDefaultValue=false)]
        public double? MaximumCpuUsage { get; set; }
        /// <summary>
        /// Gets or Sets StandardDeviationCpuUsage
        /// </summary>
        [DataMember(Name="standardDeviationCpuUsage", EmitDefaultValue=false)]
        public double? StandardDeviationCpuUsage { get; set; }
        /// <summary>
        /// Gets or Sets MinimumMemoryUsage
        /// </summary>
        [DataMember(Name="minimumMemoryUsage", EmitDefaultValue=false)]
        public double? MinimumMemoryUsage { get; set; }
        /// <summary>
        /// Gets or Sets AverageMemoryUsage
        /// </summary>
        [DataMember(Name="averageMemoryUsage", EmitDefaultValue=false)]
        public double? AverageMemoryUsage { get; set; }
        /// <summary>
        /// Gets or Sets MaximumMemoryUsage
        /// </summary>
        [DataMember(Name="maximumMemoryUsage", EmitDefaultValue=false)]
        public double? MaximumMemoryUsage { get; set; }
        /// <summary>
        /// Gets or Sets StandardDeviationMemoryUsage
        /// </summary>
        [DataMember(Name="standardDeviationMemoryUsage", EmitDefaultValue=false)]
        public double? StandardDeviationMemoryUsage { get; set; }
        /// <summary>
        /// Gets or Sets Workload
        /// </summary>
        [DataMember(Name="workload", EmitDefaultValue=false)]
        public InlineResponse200Icon Workload { get; set; }
        /// <summary>
        /// Gets or Sets IsPolicyApplicable
        /// </summary>
        [DataMember(Name="isPolicyApplicable", EmitDefaultValue=false)]
        public bool? IsPolicyApplicable { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilizationAggregate {\n");
            sb.Append("  SampleCount: ").Append(SampleCount).Append("\n");
            sb.Append("  MinimumCpuUsage: ").Append(MinimumCpuUsage).Append("\n");
            sb.Append("  AverageCpuUsage: ").Append(AverageCpuUsage).Append("\n");
            sb.Append("  MaximumCpuUsage: ").Append(MaximumCpuUsage).Append("\n");
            sb.Append("  StandardDeviationCpuUsage: ").Append(StandardDeviationCpuUsage).Append("\n");
            sb.Append("  MinimumMemoryUsage: ").Append(MinimumMemoryUsage).Append("\n");
            sb.Append("  AverageMemoryUsage: ").Append(AverageMemoryUsage).Append("\n");
            sb.Append("  MaximumMemoryUsage: ").Append(MaximumMemoryUsage).Append("\n");
            sb.Append("  StandardDeviationMemoryUsage: ").Append(StandardDeviationMemoryUsage).Append("\n");
            sb.Append("  Workload: ").Append(Workload).Append("\n");
            sb.Append("  IsPolicyApplicable: ").Append(IsPolicyApplicable).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UtilizationAggregate);
        }

        /// <summary>
        /// Returns true if UtilizationAggregate instances are equal
        /// </summary>
        /// <param name="other">Instance of UtilizationAggregate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilizationAggregate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SampleCount == other.SampleCount ||
                    this.SampleCount != null &&
                    this.SampleCount.Equals(other.SampleCount)
                ) && 
                (
                    this.MinimumCpuUsage == other.MinimumCpuUsage ||
                    this.MinimumCpuUsage != null &&
                    this.MinimumCpuUsage.Equals(other.MinimumCpuUsage)
                ) && 
                (
                    this.AverageCpuUsage == other.AverageCpuUsage ||
                    this.AverageCpuUsage != null &&
                    this.AverageCpuUsage.Equals(other.AverageCpuUsage)
                ) && 
                (
                    this.MaximumCpuUsage == other.MaximumCpuUsage ||
                    this.MaximumCpuUsage != null &&
                    this.MaximumCpuUsage.Equals(other.MaximumCpuUsage)
                ) && 
                (
                    this.StandardDeviationCpuUsage == other.StandardDeviationCpuUsage ||
                    this.StandardDeviationCpuUsage != null &&
                    this.StandardDeviationCpuUsage.Equals(other.StandardDeviationCpuUsage)
                ) && 
                (
                    this.MinimumMemoryUsage == other.MinimumMemoryUsage ||
                    this.MinimumMemoryUsage != null &&
                    this.MinimumMemoryUsage.Equals(other.MinimumMemoryUsage)
                ) && 
                (
                    this.AverageMemoryUsage == other.AverageMemoryUsage ||
                    this.AverageMemoryUsage != null &&
                    this.AverageMemoryUsage.Equals(other.AverageMemoryUsage)
                ) && 
                (
                    this.MaximumMemoryUsage == other.MaximumMemoryUsage ||
                    this.MaximumMemoryUsage != null &&
                    this.MaximumMemoryUsage.Equals(other.MaximumMemoryUsage)
                ) && 
                (
                    this.StandardDeviationMemoryUsage == other.StandardDeviationMemoryUsage ||
                    this.StandardDeviationMemoryUsage != null &&
                    this.StandardDeviationMemoryUsage.Equals(other.StandardDeviationMemoryUsage)
                ) && 
                (
                    this.Workload == other.Workload ||
                    this.Workload != null &&
                    this.Workload.Equals(other.Workload)
                ) && 
                (
                    this.IsPolicyApplicable == other.IsPolicyApplicable ||
                    this.IsPolicyApplicable != null &&
                    this.IsPolicyApplicable.Equals(other.IsPolicyApplicable)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SampleCount != null)
                    hash = hash * 59 + this.SampleCount.GetHashCode();
                if (this.MinimumCpuUsage != null)
                    hash = hash * 59 + this.MinimumCpuUsage.GetHashCode();
                if (this.AverageCpuUsage != null)
                    hash = hash * 59 + this.AverageCpuUsage.GetHashCode();
                if (this.MaximumCpuUsage != null)
                    hash = hash * 59 + this.MaximumCpuUsage.GetHashCode();
                if (this.StandardDeviationCpuUsage != null)
                    hash = hash * 59 + this.StandardDeviationCpuUsage.GetHashCode();
                if (this.MinimumMemoryUsage != null)
                    hash = hash * 59 + this.MinimumMemoryUsage.GetHashCode();
                if (this.AverageMemoryUsage != null)
                    hash = hash * 59 + this.AverageMemoryUsage.GetHashCode();
                if (this.MaximumMemoryUsage != null)
                    hash = hash * 59 + this.MaximumMemoryUsage.GetHashCode();
                if (this.StandardDeviationMemoryUsage != null)
                    hash = hash * 59 + this.StandardDeviationMemoryUsage.GetHashCode();
                if (this.Workload != null)
                    hash = hash * 59 + this.Workload.GetHashCode();
                if (this.IsPolicyApplicable != null)
                    hash = hash * 59 + this.IsPolicyApplicable.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
