/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AddOnsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AddOnsApiTests
    {
        private AddOnsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AddOnsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AddOnsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AddOnsApi
            //Assert.IsInstanceOfType(typeof(AddOnsApi), instance, "instance is a AddOnsApi");
        }

        
        /// <summary>
        /// Test AddOnsDelete
        /// </summary>
        [Test]
        public void AddOnsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //instance.AddOnsDelete(alias, subAlias);
            
        }
        
        /// <summary>
        /// Test AddOnsDeleteByAlias
        /// </summary>
        [Test]
        public void AddOnsDeleteByAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //instance.AddOnsDeleteByAlias(alias, subAlias);
            
        }
        
        /// <summary>
        /// Test AddOnsGet
        /// </summary>
        [Test]
        public void AddOnsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string include = null;
            //var response = instance.AddOnsGet(include);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test AddOnsGetByAlias
        /// </summary>
        [Test]
        public void AddOnsGetByAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AddOnsGetByAlias(id);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test AddOnsGetBySubAlias
        /// </summary>
        [Test]
        public void AddOnsGetBySubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //string include = null;
            //var response = instance.AddOnsGetBySubAlias(alias, subAlias, include);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test AddOnsPost
        /// </summary>
        [Test]
        public void AddOnsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Options options = null;
            //var response = instance.AddOnsPost(id, options);
            //Assert.IsInstanceOf<InlineResponse200DeployedAddOns> (response, "response is InlineResponse200DeployedAddOns");
        }
        
        /// <summary>
        /// Test AddOnsPostToSubAlias
        /// </summary>
        [Test]
        public void AddOnsPostToSubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //Options1 options = null;
            //string alias = null;
            //string subAlias = null;
            //var response = instance.AddOnsPostToSubAlias(id, options, alias, subAlias);
            //Assert.IsInstanceOf<InlineResponse200DeployedAddOns> (response, "response is InlineResponse200DeployedAddOns");
        }
        
    }

}
