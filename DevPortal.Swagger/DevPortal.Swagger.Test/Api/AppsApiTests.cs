/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AppsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AppsApiTests
    {
        private AppsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AppsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AppsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AppsApi
            //Assert.IsInstanceOfType(typeof(AppsApi), instance, "instance is a AppsApi");
        }

        
        /// <summary>
        /// Test AppsDelete
        /// </summary>
        [Test]
        public void AppsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.AppsDelete(id);
            
        }
        
        /// <summary>
        /// Test AppsDeleteBySubAlias
        /// </summary>
        [Test]
        public void AppsDeleteBySubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string alias = null;
            //string subAlias = null;
            //instance.AppsDeleteBySubAlias(id, alias, subAlias);
            
        }
        
        /// <summary>
        /// Test AppsGet
        /// </summary>
        [Test]
        public void AppsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.AppsGet(id);
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test AppsGetBySubAlias
        /// </summary>
        [Test]
        public void AppsGetBySubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alias = null;
            //string subAlias = null;
            //var response = instance.AppsGetBySubAlias(alias, subAlias);
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test AppsPost
        /// </summary>
        [Test]
        public void AppsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //App2 app = null;
            //string alias = null;
            //string subAlias = null;
            //instance.AppsPost(app, alias, subAlias);
            
        }
        
        /// <summary>
        /// Test AppsPut
        /// </summary>
        [Test]
        public void AppsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //App app = null;
            //instance.AppsPut(id, app);
            
        }
        
        /// <summary>
        /// Test AppsPutBySubAlias
        /// </summary>
        [Test]
        public void AppsPutBySubAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //App1 app = null;
            //string alias = null;
            //string subAlias = null;
            //instance.AppsPutBySubAlias(id, app, alias, subAlias);
            
        }
        
    }

}
